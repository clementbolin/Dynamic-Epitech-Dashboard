var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.11,1,2.071]],["body/controllers/AppController.html",[0,1.669,1,3.114,2,1.284,3,0.295,4,0.295,5,0.251,6,3.091,7,0.437,8,0.937,9,4.728,10,4.805,11,2.547,12,0.031,13,0.779,14,3.696,15,0.937,16,3.696,17,3.663,18,3.696,19,3.696,20,0.786,21,0.786,22,0.437,23,0.721,24,3.46,25,0.721,26,0.451,27,2.692,28,0.341,29,2.395,30,3.696,31,3.696,32,2.395,33,2.831,34,3.091,35,0.295,36,0.129,37,1.959,38,3.696,39,0.937,40,3.696,41,3.696,42,3.696,43,3.696,44,3.696,45,3.696,46,3.696,47,0.023,48,0.023]],["title/modules/AppModule.html",[49,1.203,50,2.071]],["body/modules/AppModule.html",[1,3.178,2,1.491,3,0.249,4,0.249,5,0.212,12,0.031,22,0.369,26,0.49,28,0.288,33,3.033,34,2.61,35,0.249,36,0.109,47,0.02,48,0.02,49,1.616,50,4.098,51,1.386,52,1.906,53,2.61,54,2.61,55,2.61,56,3.34,57,3.34,58,3.34,59,3.34,60,2.275,61,1.655,62,1.655,63,3.121,64,2.505,65,2.781,66,2.61,67,2.022,68,1.906,69,1.275,70,3.121,71,0.994,72,2.61,73,3.121,74,3.121,75,3.121,76,3.121,77,3.121,78,4.291,79,3.121,80,3.121,81,3.121,82,3.121,83,3.121,84,1.655,85,3.121,86,1.655,87,3.121,88,3.121,89,3.121,90,3.121]],["title/injectables/AppService.html",[33,1.694,91,0.145]],["body/injectables/AppService.html",[3,0.345,4,0.345,5,0.294,7,0.512,8,1.035,9,5.006,12,0.031,13,0.701,15,0.843,22,0.512,25,0.843,26,0.345,28,0.399,33,2.813,35,0.345,36,0.151,39,0.843,47,0.025,48,0.025,91,0.241,92,1.088,93,3.616,94,4.324,95,3.616,96,3.097,97,4.324,98,3.616]],["title/controllers/AuthController.html",[0,1.11,99,2.071]],["body/controllers/AuthController.html",[0,0.501,2,0.501,3,0.115,4,0.115,5,0.098,7,0.171,8,0.465,11,2.869,12,0.032,13,0.877,15,1.055,17,4.091,20,1.152,21,1.152,22,0.641,23,1.055,24,3.938,25,0.871,26,0.283,27,1.051,28,0.133,32,0.934,35,0.115,36,0.05,37,0.765,39,0.871,47,0.011,48,0.011,99,1.544,100,1.206,101,0.934,102,1.442,103,2.023,104,2.383,105,2.383,106,2.383,107,2.383,108,2.383,109,2.383,110,2.383,111,2.383,112,2.383,113,2.383,114,2.383,115,2.383,116,2.383,117,2.383,118,1.442,119,1.442,120,1.442,121,1.442,122,1.442,123,1.442,124,5.412,125,1.442,126,1.442,127,1.442,128,1.442,129,1.442,130,1.442,131,1.442,132,1.442,133,1.442,134,1.442,135,1.442,136,1.442,137,1.442,138,1.442,139,1.442,140,1.442,141,1.442,142,1.442,143,1.442,144,1.442,145,1.442,146,1.442,147,1.442,148,1.442,149,1.442,150,1.442,151,1.442,152,1.442,153,1.442,154,1.442,155,1.442,156,1.442,157,1.442,158,1.442,159,1.442,160,1.442,161,1.391,162,1.391,163,1.264,164,1.391,165,1.442,166,1.206,167,1.442,168,1.442,169,4.67,170,1.206,171,0.501,172,1.615,173,1.206,174,1.442,175,0.842,176,4.466,177,1.442,178,3.539,179,1.442,180,1.442,181,1.442,182,1.432,183,4.466,184,1.442,185,4.466,186,4.466,187,1.442,188,0.842,189,1.442,190,2.383,191,1.442,192,1.442,193,1.442,194,1.442,195,1.442,196,0.842,197,1.442,198,2.383,199,1.442,200,1.442,201,1.442,202,1.442,203,1.442,204,0.934,205,1.442,206,2.383,207,1.442,208,1.442,209,1.442,210,1.442,211,1.442,212,0.934,213,1.442,214,2.383,215,1.442,216,1.442,217,1.442,218,1.442,219,1.442,220,1.051,221,1.442,222,2.383,223,1.442,224,1.442,225,1.442,226,1.442,227,1.442,228,1.206,229,1.442,230,1.442,231,1.442,232,1.442,233,1.442,234,1.442]],["title/modules/AuthModule.html",[49,1.203,56,1.865]],["body/modules/AuthModule.html",[2,1.491,3,0.249,4,0.249,5,0.212,12,0.031,26,0.49,28,0.288,35,0.249,36,0.109,47,0.02,48,0.02,49,1.616,51,1.386,52,1.906,56,3.781,60,2.275,61,1.655,62,1.655,64,2.505,99,3.178,172,3.033,173,2.61,235,2.61,236,2.61,237,3.34,238,3.34,239,3.34,240,3.34,241,3.34,242,3.34,243,3.34,244,3.121,245,3.121,246,3.121,247,3.121,248,3.121,249,3.121,250,3.121,251,3.121,252,3.121]],["title/injectables/AuthService.html",[91,0.145,172,1.694]],["body/injectables/AuthService.html",[3,0.164,4,0.164,5,0.14,7,0.244,8,0.618,12,0.032,13,0.835,15,1.004,17,4.022,20,1.096,21,1.096,22,0.696,23,1.004,24,3.337,25,1.004,26,0.253,28,0.19,32,1.335,35,0.164,36,0.072,39,1.148,47,0.015,48,0.015,71,1.491,91,0.144,92,0.518,95,4.306,96,3.607,172,1.68,175,1.202,188,1.85,196,1.202,204,2.053,212,2.053,220,2.308,228,2.65,253,1.723,254,3.169,255,3.169,256,3.169,257,3.169,258,3.169,259,3.169,260,3.169,261,3.169,262,2.06,263,3.169,264,2.06,265,3.169,266,2.06,267,3.169,268,2.06,269,3.169,270,2.06,271,3.169,272,2.06,273,3.169,274,2.06,275,5.885,276,5.149,277,2.06,278,2.06]],["title/injectables/DiscordStrategy.html",[91,0.145,237,1.865]],["body/injectables/DiscordStrategy.html",[3,0.277,4,0.277,5,0.236,7,0.411,8,0.899,12,0.031,13,0.748,15,0.677,20,0.739,21,0.739,22,0.411,23,0.677,25,1.151,26,0.441,28,0.32,35,0.277,36,0.121,39,0.677,47,0.022,48,0.022,68,2.048,69,1.418,71,1.068,91,0.21,92,0.874,103,1.799,171,1.206,182,1.113,212,2.988,237,2.692,279,2.903,280,2.3,281,1.799,282,3.471,283,1.681,284,2.508,285,2.672,286,2.508,287,3.471,288,2.508,289,1.418,290,1.542,291,1.542,292,1.418,293,1.307,294,1.542,295,1.542,296,1.681,297,3.471,298,1.681,299,3.471,300,1.681,301,3.471,302,1.681,303,3.471,304,1.418,305,3.471,306,3.471,307,1.681]],["title/controllers/GithubController.html",[0,1.11,308,2.071]],["body/controllers/GithubController.html",[0,0.846,2,0.846,3,0.195,4,0.195,5,0.166,7,0.288,8,0.701,11,2.67,12,0.031,13,0.816,15,0.982,20,1.072,21,1.216,22,0.596,23,0.982,25,1.269,26,0.402,28,0.225,35,0.195,36,0.085,37,1.292,39,0.982,47,0.017,48,0.017,101,1.579,188,1.422,308,2.331,309,2.038,310,3.576,311,3.576,312,3.576,313,4.275,314,3.576,315,2.437,316,3.337,317,3.597,318,2.437,319,3.668,320,3.818,321,2.437,322,3.597,323,2.437,324,2.038,325,3.597,326,2.437,327,2.794,328,2.437,329,3.597,330,2.437,331,2.038,332,3.597,333,2.437,334,2.267,335,2.038,336,1.422,337,1.579,338,1.579,339,2.038,340,2.038,341,2.038,342,2.038,343,2.437,344,4.211,345,4.211,346,2.437,347,2.437,348,2.437,349,2.437,350,2.437,351,2.437]],["title/modules/GithubModule.html",[49,1.203,57,1.865]],["body/modules/GithubModule.html",[2,1.757,3,0.32,4,0.32,5,0.272,12,0.031,26,0.465,28,0.369,35,0.32,36,0.139,47,0.024,48,0.024,49,1.905,51,1.779,52,2.248,57,3.581,60,2.682,61,2.124,62,2.124,64,2.953,65,2.596,308,3.594,334,3.253,335,3.35,352,3.35,353,3.35,354,4.006,355,4.006,356,3.35,357,2.338,358,3.35,359,3.35,360,3.35,361,3.35,362,2.918]],["title/injectables/GithubService.html",[91,0.145,334,1.694]],["body/injectables/GithubService.html",[3,0.134,4,0.134,5,0.114,7,0.198,8,0.525,12,0.032,13,0.734,15,0.826,20,0.963,21,1.013,22,0.536,23,0.883,25,1.224,26,0.361,28,0.154,35,0.134,36,0.058,37,0.888,39,1.081,47,0.013,48,0.013,91,0.122,92,0.421,96,2.888,182,1.586,281,0.581,310,2.251,311,2.251,312,2.251,314,2.251,316,3.238,320,3.471,324,2.251,327,2.839,331,2.251,334,1.427,336,0.977,337,3.309,338,1.085,339,1.4,340,1.4,341,2.251,342,1.4,357,0.977,363,1.4,364,3.376,365,1.4,366,3.785,367,1.674,368,2.692,369,1.674,370,2.692,371,1.674,372,1.674,373,1.674,374,3.376,375,1.674,376,1.674,377,1.4,378,1.4,379,3.544,380,1.674,381,3.544,382,3.544,383,3.544,384,4.238,385,5.085,386,3.605,387,5.356,388,3.544,389,4.238,390,3.544,391,3.544,392,3.234,393,1.674,394,1.674,395,1.674,396,2.251,397,1.674,398,1.674,399,1.22,400,1.674,401,1.674]],["title/injectables/GithubStrategy.html",[91,0.145,238,1.865]],["body/injectables/GithubStrategy.html",[3,0.272,4,0.272,5,0.232,7,0.404,8,0.888,12,0.031,13,0.739,15,0.665,20,0.726,21,0.726,22,0.404,23,0.665,25,1.145,26,0.437,28,0.314,35,0.272,36,0.119,39,0.665,47,0.022,48,0.022,68,2.024,69,1.393,71,1.056,91,0.207,92,0.858,103,1.782,161,1.99,162,1.99,163,1.807,164,1.99,171,1.184,182,1.093,188,2.659,238,2.659,280,2.279,281,1.782,283,1.651,284,2.485,285,2.765,286,2.485,288,2.485,289,1.393,290,1.514,291,1.514,292,1.393,293,1.284,294,1.514,295,1.514,296,1.651,298,1.651,300,1.651,302,1.651,304,1.393,307,1.651,402,2.851,403,3.409,404,3.409,405,3.409,406,3.409,407,3.409,408,2.209,409,2.209,410,2.209]],["title/injectables/Gitlabtrategy.html",[91,0.145,239,1.865]],["body/injectables/Gitlabtrategy.html",[3,0.273,4,0.273,5,0.232,7,0.405,8,0.89,12,0.031,13,0.74,15,0.667,20,0.728,21,0.728,22,0.405,23,0.667,25,1.146,26,0.438,28,0.315,35,0.273,36,0.119,39,0.667,47,0.022,48,0.022,68,2.028,69,1.397,71,1.058,91,0.208,92,0.861,98,2.86,103,1.785,161,1.996,162,1.996,163,1.813,164,1.996,171,1.188,182,1.096,220,2.491,239,2.665,280,2.283,281,1.785,283,1.656,284,2.489,285,2.656,286,2.489,288,2.489,289,1.397,290,1.519,291,1.519,292,1.397,293,1.287,294,1.519,295,1.519,296,1.656,298,1.656,300,1.656,302,1.656,307,1.656,408,2.216,409,2.216,410,2.216,411,2.86,412,3.42,413,3.42,414,2.86,415,3.42,416,3.42,417,3.42]],["title/injectables/GoogleStrategy.html",[91,0.145,240,1.865]],["body/injectables/GoogleStrategy.html",[3,0.261,4,0.261,5,0.223,7,0.387,8,0.864,12,0.031,13,0.719,15,0.638,20,0.697,21,0.943,22,0.387,23,0.638,25,1.132,26,0.43,28,0.302,35,0.261,36,0.114,39,0.638,47,0.021,48,0.021,68,1.969,69,1.337,71,1.027,91,0.202,92,0.824,103,1.746,161,1.91,162,1.91,163,1.735,164,1.91,171,1.137,175,2.587,182,1.421,240,2.587,280,1.969,281,1.746,283,2.147,284,2.434,285,2.727,286,2.434,288,2.147,289,1.337,290,1.454,291,1.454,292,1.337,293,1.232,294,1.454,295,1.454,296,1.585,298,1.585,300,1.585,302,1.585,304,1.811,307,1.585,408,2.121,409,2.121,410,2.121,418,2.737,419,3.273,420,3.273,421,2.384,422,2.737,423,2.737,424,2.737,425,2.737,426,2.737,427,2.737,428,2.737,429,2.737,430,2.737,431,2.737,432,2.737,433,2.737]],["title/injectables/JwtAuthGuard.html",[29,2.071,91,0.145]],["body/injectables/JwtAuthGuard.html",[3,0.37,4,0.37,5,0.315,12,0.031,26,0.442,28,0.428,29,3.588,35,0.37,36,0.161,47,0.026,48,0.026,91,0.252,92,1.168,170,3.88,171,1.611,293,1.747,434,3.88,435,3.88,436,4.639]],["title/injectables/JwtStrategy.html",[91,0.145,437,1.865]],["body/injectables/JwtStrategy.html",[3,0.289,4,0.289,5,0.246,7,0.429,8,0.925,12,0.031,13,0.769,15,0.707,20,0.772,21,0.772,22,0.562,23,0.707,26,0.465,28,0.334,35,0.289,36,0.126,39,0.707,47,0.023,48,0.023,72,3.032,84,1.922,86,1.922,91,0.216,92,0.912,103,1.837,171,1.259,280,2.108,281,1.837,289,1.481,290,1.61,291,1.61,292,1.481,293,1.365,294,1.61,295,1.61,304,1.481,437,2.77,438,3.032,439,3.625,440,4.745,441,2.718,442,3.625,443,3.032,444,3.625,445,3.032,446,2.349,447,3.625,448,3.625,449,3.625,450,3.625,451,3.032,452,3.625,453,3.032,454,3.625,455,4.745,456,3.625]],["title/injectables/LinkedinStrategy.html",[91,0.145,241,1.865]],["body/injectables/LinkedinStrategy.html",[3,0.278,4,0.278,5,0.237,7,0.412,8,0.901,12,0.031,13,0.749,15,0.679,20,0.741,21,0.741,22,0.412,23,0.679,25,1.152,26,0.441,28,0.321,35,0.278,36,0.121,39,0.679,47,0.022,48,0.022,68,2.052,69,1.423,71,1.07,91,0.21,92,0.876,103,1.801,171,1.209,182,1.116,204,2.994,241,2.697,280,2.304,281,1.801,283,1.686,284,2.512,285,2.675,286,2.512,288,2.512,289,1.423,290,1.547,291,1.547,292,1.423,293,1.311,294,1.547,295,1.547,296,1.686,298,1.686,300,1.686,302,1.686,307,1.686,457,2.912,458,3.482,459,3.482,460,2.912,461,3.482,462,3.482,463,3.482,464,3.482,465,3.482]],["title/injectables/SpotidyStrategy.html",[91,0.145,242,1.865]],["body/injectables/SpotidyStrategy.html",[3,0.276,4,0.276,5,0.235,7,0.408,8,0.896,12,0.031,13,0.745,15,0.673,20,0.734,21,0.734,22,0.408,23,0.673,25,1.149,26,0.44,28,0.318,35,0.276,36,0.12,39,0.673,47,0.022,48,0.022,68,2.04,69,1.41,71,1.275,91,0.209,92,0.868,103,1.793,171,1.198,182,1.106,196,2.681,242,2.681,280,2.293,281,1.793,283,1.671,284,2.5,285,2.666,286,2.5,288,2.5,289,1.41,290,1.533,291,1.533,292,1.41,293,1.299,294,1.533,295,1.533,296,1.671,298,1.671,300,1.671,302,1.671,304,1.41,307,1.671,466,2.886,467,3.45,468,3.45,469,3.45,470,3.45,471,3.45,472,4.593,473,2.886]],["title/controllers/SpotifyController.html",[0,1.11,474,2.071]],["body/controllers/SpotifyController.html",[0,1.121,2,1.121,3,0.258,4,0.258,5,0.219,7,0.382,8,0.856,11,2.328,12,0.031,13,0.712,15,0.856,20,0.934,21,0.934,22,0.684,23,0.856,25,1.245,26,0.447,28,0.297,35,0.258,36,0.112,37,1.711,39,0.856,47,0.021,48,0.021,101,2.091,196,1.883,316,3.19,319,2.351,320,3.63,327,2.839,336,1.883,337,2.091,338,2.091,344,2.699,345,3.672,474,2.845,475,2.699,476,4.99,477,4.99,478,3.227,479,4.39,480,3.227,481,3.227,482,4.39,483,3.227,484,2.699,485,2.699,486,2.699,487,2.645,488,2.699,489,3.227,490,3.227,491,3.227,492,3.227,493,3.227]],["title/modules/SpotifyModule.html",[49,1.203,58,1.865]],["body/modules/SpotifyModule.html",[2,1.757,3,0.32,4,0.32,5,0.272,12,0.031,26,0.465,28,0.369,35,0.32,36,0.139,47,0.024,48,0.024,49,1.905,51,1.779,52,2.248,58,3.581,60,2.682,61,2.124,62,2.124,64,2.953,65,2.596,356,3.35,357,2.338,358,3.35,359,3.35,360,3.35,361,3.35,362,2.918,474,3.594,487,3.253,488,3.35,494,3.35,495,3.35,496,4.006,497,4.006]],["title/injectables/SpotifyService.html",[91,0.145,487,1.694]],["body/injectables/SpotifyService.html",[3,0.213,4,0.213,5,0.182,7,0.316,8,0.75,12,0.032,13,0.73,15,0.75,20,0.959,21,0.959,22,0.644,23,0.879,25,1.212,26,0.434,28,0.246,35,0.213,36,0.093,37,1.415,39,0.961,47,0.018,48,0.018,91,0.175,92,0.672,96,2.244,182,1.233,281,0.927,316,3.042,320,3.385,327,2.038,336,1.558,337,2.919,338,1.73,357,1.558,365,2.233,366,4.55,377,2.233,378,2.233,379,3.215,381,3.215,382,3.215,383,3.215,385,3.215,386,2.801,390,3.215,391,3.215,392,3.215,399,3.591,484,2.233,485,2.233,486,2.233,487,2.038,498,2.233,499,4.505,500,4.505,501,2.67,502,2.67,503,2.67,504,3.845,505,2.67,506,2.67,507,3.845,508,2.67,509,3.845,510,3.845,511,3.845,512,3.845,513,2.67,514,2.67,515,2.67]],["title/classes/User.html",[36,0.111,71,0.74]],["body/classes/User.html",[3,0.245,4,0.245,5,0.209,7,0.363,11,2.781,12,0.031,13,0.85,22,0.652,25,1.204,26,0.339,35,0.339,36,0.169,47,0.02,48,0.02,71,0.983,84,2.781,86,2.781,304,2.143,316,1.628,327,2.781,441,1.487,516,2.237,517,2.237,518,3.549,519,4.863,520,4.863,521,4.244,522,5.206,523,4.535,524,3.071,525,4.067,526,4.067,527,3.071,528,3.071,529,3.071,530,3.071,531,4.387,532,4.387,533,2.568,534,2.237,535,3.549,536,4.387,537,1.99,538,3.549,539,2.568]],["title/classes/UserDTO.html",[36,0.111,441,1.548]],["body/classes/UserDTO.html",[3,0.245,4,0.245,5,0.209,7,0.363,12,0.031,13,0.923,22,0.714,23,1.192,25,1.223,26,0.339,35,0.339,36,0.169,47,0.02,48,0.02,71,0.711,84,2.781,86,2.781,304,2.143,316,2.578,327,2.781,441,2.055,516,2.237,517,2.237,518,3.549,522,5.049,523,4.398,525,4.067,526,3.549,531,4.387,532,4.387,533,2.568,534,2.237,535,3.549,536,4.387,537,1.99,538,3.549,539,2.568,540,3.071,541,3.071,542,3.071,543,3.071,544,3.071,545,3.071]],["title/controllers/UsersController.html",[0,1.11,546,2.071]],["body/controllers/UsersController.html",[0,0.973,2,0.973,3,0.224,4,0.224,5,0.19,7,0.331,8,0.776,11,2.109,12,0.032,13,0.645,15,0.776,17,1.815,20,0.847,21,0.847,22,0.471,23,0.776,24,2.578,26,0.402,27,2.04,28,0.258,35,0.224,36,0.097,39,0.982,47,0.019,48,0.019,71,1.346,84,2.453,86,2.821,96,1.635,101,1.815,103,1.92,182,1.276,289,1.144,319,2.04,386,2.898,388,2.342,396,2.342,399,3.67,441,1.927,546,2.578,547,2.342,548,4.627,549,4.627,550,2.8,551,5.038,552,5.038,553,3.978,554,2.8,555,3.327,556,2.8,557,3.978,558,2.8,559,2.109,560,2.342,561,3.978,562,2.8,563,3.978,564,3.978,565,3.978,566,2.04,567,2.8,568,2.8,569,2.8,570,2.8,571,2.342,572,2.8,573,2.8,574,3.87,575,2.8,576,2.8,577,2.8,578,2.8,579,2.8,580,2.8,581,2.8,582,2.342,583,2.8,584,2.8,585,2.8,586,2.8,587,2.8,588,2.8,589,2.8]],["title/modules/UsersModule.html",[49,1.203,59,1.865]],["body/modules/UsersModule.html",[2,1.641,3,0.288,4,0.288,5,0.245,12,0.031,26,0.493,28,0.332,35,0.288,36,0.125,47,0.022,48,0.022,49,1.779,51,1.6,52,2.099,59,3.6,60,2.505,61,1.91,62,1.91,64,2.758,65,2.334,66,3.013,67,2.334,71,1.095,437,3.482,446,2.334,453,3.013,546,3.417,559,3.163,560,3.013,590,3.013,591,3.013,592,3.603,593,3.603,594,3.603,595,2.624,596,3.603,597,3.603,598,3.603,599,3.603,600,3.013,601,3.603,602,3.603,603,3.603]],["title/injectables/UsersService.html",[91,0.145,559,1.694]],["body/injectables/UsersService.html",[3,0.245,4,0.245,5,0.209,7,0.363,8,0.828,12,0.031,13,0.788,15,0.828,20,1.035,21,1.035,22,0.621,23,0.948,25,1.11,26,0.44,28,0.283,35,0.245,36,0.107,39,0.828,47,0.02,48,0.02,67,1.99,71,1.215,84,2.781,86,3.018,91,0.193,92,0.773,103,1.978,182,0.985,281,1.067,293,1.598,304,1.255,441,2.54,443,2.568,473,2.568,537,1.99,555,4.387,559,2.25,566,2.237,574,2.568,595,2.237,604,2.568,605,4.863,606,4.244,607,4.244,608,3.071,609,5.836,610,3.071,611,4.244,612,4.244,613,3.071,614,4.244,615,3.071,616,3.071,617,3.071,618,3.071,619,3.071,620,4.244,621,3.071,622,3.071,623,3.071,624,3.071]],["title/injectables/YoutubeStrategy.html",[91,0.145,243,1.865]],["body/injectables/YoutubeStrategy.html",[3,0.26,4,0.26,5,0.221,7,0.385,8,0.861,12,0.031,13,0.716,15,0.635,20,0.693,21,0.94,22,0.385,23,0.635,25,1.13,26,0.429,28,0.3,35,0.26,36,0.113,39,0.635,47,0.021,48,0.021,68,1.961,69,1.33,71,1.023,91,0.201,92,0.819,103,1.741,161,1.899,162,1.899,163,1.725,164,1.899,171,1.13,175,2.577,182,1.416,243,2.577,280,2.226,281,1.741,283,1.576,284,2.427,285,2.721,286,2.427,288,2.427,289,1.33,290,1.446,291,1.446,292,1.33,293,1.225,294,1.446,295,1.446,296,1.576,298,1.576,300,1.576,302,1.576,304,1.804,307,1.576,408,2.109,409,2.109,410,2.109,421,2.371,422,2.722,423,2.722,424,2.722,425,2.722,426,2.722,427,2.722,428,2.722,429,2.722,430,2.722,431,2.722,432,2.722,433,2.722,625,2.722,626,3.254,627,3.254]],["title/coverage.html",[628,3.647]],["body/coverage.html",[0,1.894,1,1.938,5,0.203,6,2.501,12,0.031,22,0.354,29,1.938,33,1.586,36,0.145,47,0.02,48,0.02,71,0.693,91,0.286,93,2.501,99,1.938,100,2.501,166,2.501,172,1.586,237,1.746,238,1.746,239,1.746,240,1.746,241,1.746,242,1.746,243,1.746,253,2.501,279,2.501,308,1.938,309,2.501,334,1.586,363,2.501,402,2.501,411,2.501,418,2.501,434,2.501,435,2.501,437,1.746,438,2.501,441,1.448,446,1.938,457,2.501,466,2.501,474,1.938,475,2.501,487,1.586,498,2.501,517,3.035,546,1.938,547,2.501,559,1.586,582,2.501,604,2.501,625,2.501,628,2.501,629,2.991,630,2.991,631,2.991,632,6.528,633,6.142,634,2.991,635,2.991,636,2.991,637,5.453,638,2.501,639,4.795,640,3.485,641,2.501,642,2.991,643,4.166,644,2.501,645,2.501,646,4.166,647,2.501,648,2.991,649,2.991,650,2.991]],["title/dependencies.html",[52,1.707,651,2.669]],["body/dependencies.html",[12,0.032,28,0.238,32,2.43,36,0.131,47,0.018,48,0.018,52,1.146,67,1.671,69,1.054,163,1.368,171,0.896,175,2.579,188,1.506,196,1.506,204,1.671,212,1.671,292,2.487,336,1.506,357,1.506,414,2.157,421,1.879,445,3.136,460,2.157,534,1.879,537,2.43,566,2.732,595,1.879,652,2.58,653,2.58,654,2.58,655,3.75,656,2.58,657,2.58,658,2.58,659,2.58,660,4.419,661,2.58,662,2.58,663,2.58,664,2.58,665,2.58,666,2.58,667,2.58,668,4.419,669,3.75,670,2.58,671,2.58,672,5.965,673,2.58,674,2.58,675,3.75,676,2.58,677,3.75,678,2.58,679,2.58,680,2.58,681,2.58,682,2.58,683,2.58,684,2.58,685,2.58,686,2.58,687,2.58,688,2.58,689,2.58,690,2.58,691,2.58,692,2.58,693,2.58,694,2.157,695,2.58,696,2.58,697,3.75,698,2.58,699,2.58,700,5.153,701,2.58,702,2.58,703,2.58,704,2.58,705,2.58,706,2.58,707,2.58,708,2.58,709,2.58,710,2.58,711,2.58,712,4.419,713,3.75,714,2.58,715,2.58,716,2.58,717,2.58,718,2.58,719,2.58,720,2.58,721,2.58,722,2.58,723,2.58,724,3.75,725,2.58,726,2.58,727,2.58,728,2.58,729,2.58,730,2.58,731,2.58,732,2.58,733,2.58,734,2.58,735,2.58,736,2.58,737,2.58,738,2.58,739,2.58,740,2.58,741,2.58,742,2.58,743,2.58]],["title/miscellaneous/functions.html",[744,1.729,745,3.214]],["body/miscellaneous/functions.html",[7,0.587,12,0.027,47,0.027,48,0.027,644,4.149,645,5.091,744,3.215,745,4.149,746,4.961]],["title/index.html",[7,0.316,747,2.669,748,2.669]],["body/index.html",[12,0.028,47,0.027,48,0.027,571,3.96,694,3.96,749,4.735,750,5.605,751,4.735,752,6.172,753,4.735,754,4.735,755,4.735,756,4.735,757,5.605,758,4.735,759,4.735]],["title/modules.html",[51,1.937]],["body/modules.html",[12,0.026,47,0.026,48,0.026,50,2.982,51,2.044,56,2.686,57,2.686,58,2.686,59,2.686,760,6.251,761,6.251,762,6.251,763,6.251]],["title/overview.html",[764,3.647]],["body/overview.html",[2,1.127,12,0.031,33,2.653,47,0.021,48,0.021,50,4.071,51,1.441,52,1.958,53,2.714,54,2.714,55,2.714,56,3.785,57,3.276,58,3.276,59,3.457,60,2.336,61,1.72,62,1.72,92,0.817,172,2.653,235,2.714,236,2.714,237,2.921,238,2.921,239,2.921,240,2.921,241,2.921,242,2.921,243,2.921,334,2.653,352,2.714,353,2.714,362,3.211,437,2.921,487,2.653,494,2.714,495,2.714,516,2.364,559,2.653,590,2.714,591,2.714,764,2.714,765,3.245,766,3.245]],["title/miscellaneous/variables.html",[744,1.729,767,3.214]],["body/miscellaneous/variables.html",[7,0.506,12,0.031,22,0.676,47,0.025,48,0.025,446,3.415,451,3.576,523,3.115,600,3.576,638,3.576,640,4.987,641,3.576,647,3.576,744,2.77,767,3.576,768,4.275,769,4.275,770,4.275,771,5.712,772,5.712,773,5.712,774,5.269,775,4.275]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordStrategy.html":{},"controllers/GithubController.html":{},"modules/GithubModule.html":{},"injectables/GithubService.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"controllers/SpotifyController.html":{},"modules/SpotifyModule.html":{},"injectables/SpotifyService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/YoutubeStrategy.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":632,"title":{},"body":{"coverage.html":{}}}],["0.0.3",{"_index":659,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":731,"title":{},"body":{"dependencies.html":{}}}],["0.1.4",{"_index":697,"title":{},"body":{"dependencies.html":{}}}],["0.11.0",{"_index":723,"title":{},"body":{"dependencies.html":{}}}],["0.13.0",{"_index":695,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":687,"title":{},"body":{"dependencies.html":{}}}],["0.13.7",{"_index":734,"title":{},"body":{"dependencies.html":{}}}],["0.2.4",{"_index":704,"title":{},"body":{"dependencies.html":{}}}],["0.2.40",{"_index":743,"title":{},"body":{"dependencies.html":{}}}],["0.24.0",{"_index":682,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":686,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":696,"title":{},"body":{"dependencies.html":{}}}],["0.5.6",{"_index":680,"title":{},"body":{"dependencies.html":{}}}],["0.6.2",{"_index":711,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":637,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":635,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":634,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":633,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":646,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":648,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":642,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":643,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":636,"title":{},"body":{"coverage.html":{}}}],["1.0.0",{"_index":702,"title":{},"body":{"dependencies.html":{}}}],["1.0.3",{"_index":706,"title":{},"body":{"dependencies.html":{}}}],["1.0.34",{"_index":678,"title":{},"body":{"dependencies.html":{}}}],["1.0.8",{"_index":728,"title":{},"body":{"dependencies.html":{}}}],["1.1.0",{"_index":698,"title":{},"body":{"dependencies.html":{}}}],["1.1.16",{"_index":653,"title":{},"body":{"dependencies.html":{}}}],["1.3.2",{"_index":726,"title":{},"body":{"dependencies.html":{}}}],["10.0.0",{"_index":691,"title":{},"body":{"dependencies.html":{}}}],["10.3.5",{"_index":719,"title":{},"body":{"dependencies.html":{}}}],["11.6.0",{"_index":655,"title":{},"body":{"dependencies.html":{}}}],["13.1.3",{"_index":671,"title":{},"body":{"dependencies.html":{}}}],["14",{"_index":765,"title":{},"body":{"overview.html":{}}}],["17.0.2",{"_index":712,"title":{},"body":{"dependencies.html":{}}}],["1d",{"_index":603,"title":{},"body":{"modules/UsersModule.html":{}}}],["2",{"_index":766,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":700,"title":{},"body":{"dependencies.html":{}}}],["2.7.0",{"_index":674,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":388,"title":{},"body":{"injectables/GithubService.html":{},"controllers/UsersController.html":{}}}],["3.0.6",{"_index":676,"title":{},"body":{"dependencies.html":{}}}],["3.6.5",{"_index":690,"title":{},"body":{"dependencies.html":{}}}],["39",{"_index":693,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":701,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":741,"title":{},"body":{"dependencies.html":{}}}],["4.3.1",{"_index":717,"title":{},"body":{"dependencies.html":{}}}],["4.4.4",{"_index":715,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":389,"title":{},"body":{"injectables/GithubService.html":{}}}],["5",{"_index":362,"title":{},"body":{"modules/GithubModule.html":{},"modules/SpotifyModule.html":{},"overview.html":{}}}],["5.0.0",{"_index":668,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":684,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":658,"title":{},"body":{"dependencies.html":{}}}],["5.1.4",{"_index":666,"title":{},"body":{"dependencies.html":{}}}],["5.3.0",{"_index":721,"title":{},"body":{"dependencies.html":{}}}],["5.3.3",{"_index":738,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":576,"title":{},"body":{"controllers/UsersController.html":{}}}],["5000",{"_index":360,"title":{},"body":{"modules/GithubModule.html":{},"modules/SpotifyModule.html":{}}}],["5432",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["7",{"_index":735,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":662,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":663,"title":{},"body":{"dependencies.html":{}}}],["8.0.2",{"_index":667,"title":{},"body":{"dependencies.html":{}}}],["8.2.0",{"_index":660,"title":{},"body":{"dependencies.html":{}}}],["8.7.1",{"_index":709,"title":{},"body":{"dependencies.html":{}}}],["accesstoken",{"_index":288,"title":{},"body":{"injectables/DiscordStrategy.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["alpha.3",{"_index":669,"title":{},"body":{"dependencies.html":{}}}],["always",{"_index":522,"title":{},"body":{"classes/User.html":{},"classes/UserDTO.html":{}}}],["api",{"_index":98,"title":{},"body":{"injectables/AppService.html":{},"injectables/Gitlabtrategy.html":{}}}],["app",{"_index":751,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app:start",{"_index":759,"title":{},"body":{"index.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":50,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apps/.../constants.ts",{"_index":770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../environment.prod.ts",{"_index":768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../environment.ts",{"_index":769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../main.ts",{"_index":746,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apps/api/src/app/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["apps/api/src/app/app.controller.ts:11",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["apps/api/src/app/app.controller.ts:17",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["apps/api/src/app/app.module.ts",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["apps/api/src/app/app.service.ts",{"_index":93,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["apps/api/src/app/app.service.ts:5",{"_index":94,"title":{},"body":{"injectables/AppService.html":{}}}],["apps/api/src/auth/auth.controller.ts",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["apps/api/src/auth/auth.controller.ts:105",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["apps/api/src/auth/auth.controller.ts:110",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["apps/api/src/auth/auth.controller.ts:123",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["apps/api/src/auth/auth.controller.ts:128",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["apps/api/src/auth/auth.controller.ts:15",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["apps/api/src/auth/auth.controller.ts:20",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["apps/api/src/auth/auth.controller.ts:33",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["apps/api/src/auth/auth.controller.ts:38",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["apps/api/src/auth/auth.controller.ts:51",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["apps/api/src/auth/auth.controller.ts:56",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["apps/api/src/auth/auth.controller.ts:69",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["apps/api/src/auth/auth.controller.ts:74",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["apps/api/src/auth/auth.controller.ts:87",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["apps/api/src/auth/auth.controller.ts:92",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["apps/api/src/auth/auth.module.ts",{"_index":244,"title":{},"body":{"modules/AuthModule.html":{}}}],["apps/api/src/auth/auth.service.ts",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["apps/api/src/auth/auth.service.ts:19",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/auth/auth.service.ts:31",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/auth/auth.service.ts:43",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/auth/auth.service.ts:55",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/auth/auth.service.ts:67",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/auth/auth.service.ts:7",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/auth/auth.service.ts:79",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/auth/discord.strategy.ts",{"_index":279,"title":{},"body":{"injectables/DiscordStrategy.html":{},"coverage.html":{}}}],["apps/api/src/auth/discord.strategy.ts:10",{"_index":282,"title":{},"body":{"injectables/DiscordStrategy.html":{}}}],["apps/api/src/auth/discord.strategy.ts:20",{"_index":287,"title":{},"body":{"injectables/DiscordStrategy.html":{}}}],["apps/api/src/auth/github.strategy.ts",{"_index":402,"title":{},"body":{"injectables/GithubStrategy.html":{},"coverage.html":{}}}],["apps/api/src/auth/github.strategy.ts:10",{"_index":403,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["apps/api/src/auth/github.strategy.ts:21",{"_index":404,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["apps/api/src/auth/gitlab.strategy.ts",{"_index":411,"title":{},"body":{"injectables/Gitlabtrategy.html":{},"coverage.html":{}}}],["apps/api/src/auth/gitlab.strategy.ts:10",{"_index":412,"title":{},"body":{"injectables/Gitlabtrategy.html":{}}}],["apps/api/src/auth/gitlab.strategy.ts:21",{"_index":413,"title":{},"body":{"injectables/Gitlabtrategy.html":{}}}],["apps/api/src/auth/google.strategy.ts",{"_index":418,"title":{},"body":{"injectables/GoogleStrategy.html":{},"coverage.html":{}}}],["apps/api/src/auth/google.strategy.ts:20",{"_index":420,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["apps/api/src/auth/google.strategy.ts:9",{"_index":419,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["apps/api/src/auth/jwt",{"_index":434,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["apps/api/src/auth/jwt.strategy.ts",{"_index":438,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["apps/api/src/auth/jwt.strategy.ts:17",{"_index":442,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/api/src/auth/jwt.strategy.ts:8",{"_index":439,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/api/src/auth/linkedin.strategy.ts",{"_index":457,"title":{},"body":{"injectables/LinkedinStrategy.html":{},"coverage.html":{}}}],["apps/api/src/auth/linkedin.strategy.ts:10",{"_index":458,"title":{},"body":{"injectables/LinkedinStrategy.html":{}}}],["apps/api/src/auth/linkedin.strategy.ts:20",{"_index":459,"title":{},"body":{"injectables/LinkedinStrategy.html":{}}}],["apps/api/src/auth/spotify.strategy.ts",{"_index":466,"title":{},"body":{"injectables/SpotidyStrategy.html":{},"coverage.html":{}}}],["apps/api/src/auth/spotify.strategy.ts:10",{"_index":467,"title":{},"body":{"injectables/SpotidyStrategy.html":{}}}],["apps/api/src/auth/spotify.strategy.ts:20",{"_index":468,"title":{},"body":{"injectables/SpotidyStrategy.html":{}}}],["apps/api/src/auth/youtube.strategy.ts",{"_index":625,"title":{},"body":{"injectables/YoutubeStrategy.html":{},"coverage.html":{}}}],["apps/api/src/auth/youtube.strategy.ts:20",{"_index":627,"title":{},"body":{"injectables/YoutubeStrategy.html":{}}}],["apps/api/src/auth/youtube.strategy.ts:9",{"_index":626,"title":{},"body":{"injectables/YoutubeStrategy.html":{}}}],["apps/api/src/environments/environment.prod.ts",{"_index":638,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/environments/environment.ts",{"_index":641,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/github/github.controller.ts",{"_index":309,"title":{},"body":{"controllers/GithubController.html":{},"coverage.html":{}}}],["apps/api/src/github/github.controller.ts:16",{"_index":318,"title":{},"body":{"controllers/GithubController.html":{}}}],["apps/api/src/github/github.controller.ts:24",{"_index":323,"title":{},"body":{"controllers/GithubController.html":{}}}],["apps/api/src/github/github.controller.ts:32",{"_index":326,"title":{},"body":{"controllers/GithubController.html":{}}}],["apps/api/src/github/github.controller.ts:40",{"_index":333,"title":{},"body":{"controllers/GithubController.html":{}}}],["apps/api/src/github/github.controller.ts:48",{"_index":330,"title":{},"body":{"controllers/GithubController.html":{}}}],["apps/api/src/github/github.module.ts",{"_index":354,"title":{},"body":{"modules/GithubModule.html":{}}}],["apps/api/src/github/github.service.ts",{"_index":363,"title":{},"body":{"injectables/GithubService.html":{},"coverage.html":{}}}],["apps/api/src/github/github.service.ts:110",{"_index":375,"title":{},"body":{"injectables/GithubService.html":{}}}],["apps/api/src/github/github.service.ts:13",{"_index":367,"title":{},"body":{"injectables/GithubService.html":{}}}],["apps/api/src/github/github.service.ts:16",{"_index":369,"title":{},"body":{"injectables/GithubService.html":{}}}],["apps/api/src/github/github.service.ts:35",{"_index":371,"title":{},"body":{"injectables/GithubService.html":{}}}],["apps/api/src/github/github.service.ts:54",{"_index":372,"title":{},"body":{"injectables/GithubService.html":{}}}],["apps/api/src/github/github.service.ts:82",{"_index":376,"title":{},"body":{"injectables/GithubService.html":{}}}],["apps/api/src/main.ts",{"_index":644,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["apps/api/src/spotify/spotify.controller.ts",{"_index":475,"title":{},"body":{"controllers/SpotifyController.html":{},"coverage.html":{}}}],["apps/api/src/spotify/spotify.controller.ts:12",{"_index":480,"title":{},"body":{"controllers/SpotifyController.html":{}}}],["apps/api/src/spotify/spotify.controller.ts:21",{"_index":483,"title":{},"body":{"controllers/SpotifyController.html":{}}}],["apps/api/src/spotify/spotify.module.ts",{"_index":496,"title":{},"body":{"modules/SpotifyModule.html":{}}}],["apps/api/src/spotify/spotify.service.ts",{"_index":498,"title":{},"body":{"injectables/SpotifyService.html":{},"coverage.html":{}}}],["apps/api/src/spotify/spotify.service.ts:12",{"_index":503,"title":{},"body":{"injectables/SpotifyService.html":{}}}],["apps/api/src/spotify/spotify.service.ts:38",{"_index":506,"title":{},"body":{"injectables/SpotifyService.html":{}}}],["apps/api/src/spotify/spotify.service.ts:9",{"_index":501,"title":{},"body":{"injectables/SpotifyService.html":{}}}],["apps/api/src/users/constants.ts",{"_index":647,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/users/user.ts",{"_index":517,"title":{},"body":{"classes/User.html":{},"classes/UserDTO.html":{},"coverage.html":{}}}],["apps/api/src/users/user.ts:13",{"_index":530,"title":{},"body":{"classes/User.html":{}}}],["apps/api/src/users/user.ts:19",{"_index":529,"title":{},"body":{"classes/User.html":{}}}],["apps/api/src/users/user.ts:25",{"_index":524,"title":{},"body":{"classes/User.html":{}}}],["apps/api/src/users/user.ts:29",{"_index":541,"title":{},"body":{"classes/UserDTO.html":{}}}],["apps/api/src/users/user.ts:30",{"_index":545,"title":{},"body":{"classes/UserDTO.html":{}}}],["apps/api/src/users/user.ts:31",{"_index":542,"title":{},"body":{"classes/UserDTO.html":{}}}],["apps/api/src/users/user.ts:32",{"_index":540,"title":{},"body":{"classes/UserDTO.html":{}}}],["apps/api/src/users/user.ts:33",{"_index":543,"title":{},"body":{"classes/UserDTO.html":{}}}],["apps/api/src/users/user.ts:34",{"_index":544,"title":{},"body":{"classes/UserDTO.html":{}}}],["apps/api/src/users/user.ts:7",{"_index":527,"title":{},"body":{"classes/User.html":{}}}],["apps/api/src/users/users.controller.ts",{"_index":547,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["apps/api/src/users/users.controller.ts:27",{"_index":558,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.controller.ts:45",{"_index":554,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.module.ts",{"_index":592,"title":{},"body":{"modules/UsersModule.html":{}}}],["apps/api/src/users/users.service.ts",{"_index":604,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["apps/api/src/users/users.service.ts:13",{"_index":613,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:24",{"_index":615,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:8",{"_index":610,"title":{},"body":{"injectables/UsersService.html":{}}}],["appservice",{"_index":33,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["artist",{"_index":504,"title":{},"body":{"injectables/SpotifyService.html":{}}}],["async",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/DiscordStrategy.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/YoutubeStrategy.html":{}}}],["auth",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":245,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":31,"title":{},"body":{"controllers/AppController.html":{}}}],["auth.guard.ts",{"_index":435,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/jwt",{"_index":30,"title":{},"body":{"controllers/AppController.html":{}}}],["auth/jwt.strategy",{"_index":597,"title":{},"body":{"modules/UsersModule.html":{}}}],["authcontroller",{"_index":99,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":436,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":56,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authorization",{"_index":382,"title":{},"body":{"injectables/GithubService.html":{},"injectables/SpotifyService.html":{}}}],["authservice",{"_index":172,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":574,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["axios",{"_index":681,"title":{},"body":{"dependencies.html":{}}}],["bad",{"_index":392,"title":{},"body":{"injectables/GithubService.html":{},"injectables/SpotifyService.html":{}}}],["base",{"_index":571,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["bcrypt",{"_index":683,"title":{},"body":{"dependencies.html":{}}}],["bearer",{"_index":509,"title":{},"body":{"injectables/SpotifyService.html":{}}}],["body",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.user.accesstoken",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["bootstrap",{"_index":645,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":763,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":760,"title":{},"body":{"modules.html":{}}}],["build",{"_index":750,"title":{},"body":{"index.html":{}}}],["callbackurl",{"_index":300,"title":{},"body":{"injectables/DiscordStrategy.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["catch",{"_index":587,"title":{},"body":{"controllers/UsersController.html":{}}}],["class",{"_index":36,"title":{"classes/User.html":{},"classes/UserDTO.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordStrategy.html":{},"controllers/GithubController.html":{},"modules/GithubModule.html":{},"injectables/GithubService.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"controllers/SpotifyController.html":{},"modules/SpotifyModule.html":{},"injectables/SpotifyService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/YoutubeStrategy.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":516,"title":{},"body":{"classes/User.html":{},"classes/UserDTO.html":{},"overview.html":{}}}],["clientid",{"_index":296,"title":{},"body":{"injectables/DiscordStrategy.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["clientsecret",{"_index":298,"title":{},"body":{"injectables/DiscordStrategy.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["cluster_appmodule",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_githubmodule",{"_index":352,"title":{},"body":{"modules/GithubModule.html":{},"overview.html":{}}}],["cluster_githubmodule_providers",{"_index":353,"title":{},"body":{"modules/GithubModule.html":{},"overview.html":{}}}],["cluster_spotifymodule",{"_index":494,"title":{},"body":{"modules/SpotifyModule.html":{},"overview.html":{}}}],["cluster_spotifymodule_providers",{"_index":495,"title":{},"body":{"modules/SpotifyModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":590,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":591,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":536,"title":{},"body":{"classes/User.html":{},"classes/UserDTO.html":{}}}],["column()@isdefined({always",{"_index":519,"title":{},"body":{"classes/User.html":{}}}],["compodoc/compodoc",{"_index":652,"title":{},"body":{"dependencies.html":{}}}],["components",{"_index":737,"title":{},"body":{"dependencies.html":{}}}],["compose",{"_index":755,"title":{},"body":{"index.html":{}}}],["config",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"injectables/DiscordStrategy.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["connection",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(req",{"_index":44,"title":{},"body":{"controllers/AppController.html":{}}}],["const",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"injectables/DiscordStrategy.html":{},"injectables/GithubService.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"injectables/SpotifyService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/YoutubeStrategy.html":{}}}],["constants",{"_index":596,"title":{},"body":{"modules/UsersModule.html":{}}}],["constructor",{"_index":281,"title":{},"body":{"injectables/DiscordStrategy.html":{},"injectables/GithubService.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"injectables/SpotifyService.html":{},"injectables/UsersService.html":{},"injectables/YoutubeStrategy.html":{}}}],["constructor(@injectrepository(user",{"_index":617,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(httpservice",{"_index":365,"title":{},"body":{"injectables/GithubService.html":{},"injectables/SpotifyService.html":{}}}],["constructor(private",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/GithubController.html":{},"injectables/GithubService.html":{},"controllers/SpotifyController.html":{},"injectables/SpotifyService.html":{}}}],["constructor(public",{"_index":569,"title":{},"body":{"controllers/UsersController.html":{}}}],["constructor(repo",{"_index":608,"title":{},"body":{"injectables/UsersService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/GithubController.html":{},"controllers/SpotifyController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/GithubController.html":{},"controllers/SpotifyController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('github",{"_index":343,"title":{},"body":{"controllers/GithubController.html":{}}}],["controller('spotify",{"_index":489,"title":{},"body":{"controllers/SpotifyController.html":{}}}],["controller('user",{"_index":568,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/GithubController.html":{},"modules/GithubModule.html":{},"controllers/SpotifyController.html":{},"modules/SpotifyModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["core",{"_index":688,"title":{},"body":{"dependencies.html":{}}}],["coverage",{"_index":628,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["createone",{"_index":548,"title":{},"body":{"controllers/UsersController.html":{}}}],["createone(req",{"_index":550,"title":{},"body":{"controllers/UsersController.html":{}}}],["crud",{"_index":561,"title":{},"body":{"controllers/UsersController.html":{}}}],["crudcontroller",{"_index":565,"title":{},"body":{"controllers/UsersController.html":{}}}],["crudrequest",{"_index":551,"title":{},"body":{"controllers/UsersController.html":{}}}],["dashboard",{"_index":749,"title":{},"body":{"index.html":{}}}],["dashboard:nx",{"_index":754,"title":{},"body":{"index.html":{}}}],["dashboardresponse",{"_index":337,"title":{},"body":{"controllers/GithubController.html":{},"injectables/GithubService.html":{},"controllers/SpotifyController.html":{},"injectables/SpotifyService.html":{}}}],["database",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["decorators",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/GithubController.html":{},"controllers/SpotifyController.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordStrategy.html":{},"controllers/GithubController.html":{},"injectables/GithubService.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"controllers/SpotifyController.html":{},"injectables/SpotifyService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/YoutubeStrategy.html":{}}}],["dependencies",{"_index":52,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GithubModule.html":{},"modules/SpotifyModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["disable",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["discord",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordStrategy.html":{},"dependencies.html":{}}}],["discord.strategy",{"_index":246,"title":{},"body":{"modules/AuthModule.html":{}}}],["discordauth",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["discordauth(@req",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["discordauth(req",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["discordauthcallback",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["discordauthcallback(@req",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["discordauthcallback(req",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["discordlogin",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["discordlogin(req",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["discordstrategy",{"_index":237,"title":{"injectables/DiscordStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/DiscordStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["docker",{"_index":752,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":629,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":713,"title":{},"body":{"dependencies.html":{}}}],["done",{"_index":286,"title":{},"body":{"injectables/DiscordStrategy.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["done(null",{"_index":307,"title":{},"body":{"injectables/DiscordStrategy.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["dotenv",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"injectables/DiscordStrategy.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"injectables/YoutubeStrategy.html":{},"dependencies.html":{}}}],["draggable",{"_index":714,"title":{},"body":{"dependencies.html":{}}}],["dto",{"_index":552,"title":{},"body":{"controllers/UsersController.html":{}}}],["email",{"_index":304,"title":{},"body":{"injectables/DiscordStrategy.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/SpotidyStrategy.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"injectables/UsersService.html":{},"injectables/YoutubeStrategy.html":{}}}],["emails",{"_index":425,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["emails[0].value",{"_index":427,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["embed",{"_index":727,"title":{},"body":{"dependencies.html":{}}}],["emotion/react",{"_index":654,"title":{},"body":{"dependencies.html":{}}}],["emotion/styled",{"_index":656,"title":{},"body":{"dependencies.html":{}}}],["empty",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["entities",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["entity",{"_index":535,"title":{},"body":{"classes/User.html":{},"classes/UserDTO.html":{}}}],["environment",{"_index":640,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["err",{"_index":588,"title":{},"body":{"controllers/UsersController.html":{}}}],["eslint",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["eslint/no",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["expiresin",{"_index":602,"title":{},"body":{"modules/UsersModule.html":{}}}],["explicit",{"_index":410,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["export",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordStrategy.html":{},"controllers/GithubController.html":{},"modules/GithubModule.html":{},"injectables/GithubService.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"controllers/SpotifyController.html":{},"modules/SpotifyModule.html":{},"injectables/SpotifyService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/YoutubeStrategy.html":{}}}],["express",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["extends",{"_index":293,"title":{},"body":{"injectables/DiscordStrategy.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"injectables/UsersService.html":{},"injectables/YoutubeStrategy.html":{}}}],["extractjwt",{"_index":444,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":449,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":451,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordStrategy.html":{},"controllers/GithubController.html":{},"modules/GithubModule.html":{},"injectables/GithubService.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"controllers/SpotifyController.html":{},"modules/SpotifyModule.html":{},"injectables/SpotifyService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/YoutubeStrategy.html":{},"coverage.html":{}}}],["firstname",{"_index":428,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["function",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["functions",{"_index":745,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generatetoken",{"_index":606,"title":{},"body":{"injectables/UsersService.html":{}}}],["generatetoken(user",{"_index":612,"title":{},"body":{"injectables/UsersService.html":{}}}],["get('/discord",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/discord')@useguards(undefined",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/discord/redirect",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/discord/redirect')@useguards(undefined)@redirect",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/github",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/github')@useguards(undefined",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/github/redirect",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/github/redirect')@useguards(undefined)@redirect",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/gitlab",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/gitlab')@useguards(undefined",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/gitlab/redirect",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/gitlab/redirect')@useguards(undefined)@redirect",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/google",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/google')@useguards(undefined",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/linkedin",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/linkedin')@useguards(undefined",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/linkedin/redirect",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/linkedin/redirect')@useguards(undefined)@redirect",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/login/:username/:password",{"_index":557,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/search/:artist/:type/:token",{"_index":479,"title":{},"body":{"controllers/SpotifyController.html":{}}}],["get('/spotify",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/spotify')@useguards(undefined",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/spotify/redirect",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/spotify/redirect')@useguards(undefined)@redirect",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/tests",{"_index":41,"title":{},"body":{"controllers/AppController.html":{}}}],["get('/tests')@useguards(jwtauthguard",{"_index":18,"title":{},"body":{"controllers/AppController.html":{}}}],["get('/track/:id/:token",{"_index":482,"title":{},"body":{"controllers/SpotifyController.html":{}}}],["get('/user/:id/:reponame/:token",{"_index":329,"title":{},"body":{"controllers/GithubController.html":{}}}],["get('/user/:id/:token",{"_index":325,"title":{},"body":{"controllers/GithubController.html":{}}}],["get('/user/:id/followers/:token",{"_index":317,"title":{},"body":{"controllers/GithubController.html":{}}}],["get('/user/:id/followings/:token",{"_index":322,"title":{},"body":{"controllers/GithubController.html":{}}}],["get('/user/:id/repos/:token",{"_index":332,"title":{},"body":{"controllers/GithubController.html":{}}}],["get('/youtube",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/youtube')@useguards(undefined",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/youtube/redirect",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/youtube/redirect')@useguards(undefined)@redirect",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('redirect",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('redirect')@useguards(undefined)@redirect",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(`https://api.github.com/repos/${id}/${reponame",{"_index":398,"title":{},"body":{"injectables/GithubService.html":{}}}],["get(`https://api.github.com/users/${id",{"_index":394,"title":{},"body":{"injectables/GithubService.html":{}}}],["get(`https://api.github.com/users/${id}/followers",{"_index":380,"title":{},"body":{"injectables/GithubService.html":{}}}],["get(`https://api.github.com/users/${id}/following",{"_index":393,"title":{},"body":{"injectables/GithubService.html":{}}}],["get(`https://api.github.com/users/${id}/repos",{"_index":397,"title":{},"body":{"injectables/GithubService.html":{}}}],["getdata",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getfollowers",{"_index":310,"title":{},"body":{"controllers/GithubController.html":{},"injectables/GithubService.html":{}}}],["getfollowers(id",{"_index":368,"title":{},"body":{"injectables/GithubService.html":{}}}],["getfollowers(param",{"_index":315,"title":{},"body":{"controllers/GithubController.html":{}}}],["getfollowings",{"_index":311,"title":{},"body":{"controllers/GithubController.html":{},"injectables/GithubService.html":{}}}],["getfollowings(id",{"_index":370,"title":{},"body":{"injectables/GithubService.html":{}}}],["getfollowings(param",{"_index":321,"title":{},"body":{"controllers/GithubController.html":{}}}],["getoneuser",{"_index":607,"title":{},"body":{"injectables/UsersService.html":{}}}],["getoneuser(username",{"_index":614,"title":{},"body":{"injectables/UsersService.html":{}}}],["getprofil",{"_index":312,"title":{},"body":{"controllers/GithubController.html":{},"injectables/GithubService.html":{}}}],["getprofil(id",{"_index":324,"title":{},"body":{"controllers/GithubController.html":{},"injectables/GithubService.html":{}}}],["getsearchrepo",{"_index":364,"title":{},"body":{"injectables/GithubService.html":{}}}],["getsearchrepo(id",{"_index":373,"title":{},"body":{"injectables/GithubService.html":{}}}],["getspecificrepo",{"_index":313,"title":{},"body":{"controllers/GithubController.html":{}}}],["getspecificrepo(id",{"_index":328,"title":{},"body":{"controllers/GithubController.html":{}}}],["getting",{"_index":747,"title":{"index.html":{}},"body":{}}],["getuserrepos",{"_index":314,"title":{},"body":{"controllers/GithubController.html":{},"injectables/GithubService.html":{}}}],["getuserrepos(id",{"_index":331,"title":{},"body":{"controllers/GithubController.html":{},"injectables/GithubService.html":{}}}],["github",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/GithubController.html":{},"injectables/GithubStrategy.html":{},"dependencies.html":{}}}],["github.controller",{"_index":355,"title":{},"body":{"modules/GithubModule.html":{}}}],["github.service",{"_index":335,"title":{},"body":{"controllers/GithubController.html":{},"modules/GithubModule.html":{}}}],["github.strategy",{"_index":247,"title":{},"body":{"modules/AuthModule.html":{}}}],["github/github.module",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["githubauth",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["githubauth(@req",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["githubauth(req",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["githubauthcallback",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["githubauthcallback(@req",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["githubauthcallback(req",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["githubcontroller",{"_index":308,"title":{"controllers/GithubController.html":{}},"body":{"controllers/GithubController.html":{},"modules/GithubModule.html":{},"coverage.html":{}}}],["githubfollower",{"_index":339,"title":{},"body":{"controllers/GithubController.html":{},"injectables/GithubService.html":{}}}],["githublogin",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["githublogin(req",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["githubmodule",{"_index":57,"title":{"modules/GithubModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GithubModule.html":{},"modules.html":{},"overview.html":{}}}],["githubprofil",{"_index":340,"title":{},"body":{"controllers/GithubController.html":{},"injectables/GithubService.html":{}}}],["githubrepo",{"_index":341,"title":{},"body":{"controllers/GithubController.html":{},"injectables/GithubService.html":{}}}],["githubservice",{"_index":334,"title":{"injectables/GithubService.html":{}},"body":{"controllers/GithubController.html":{},"modules/GithubModule.html":{},"injectables/GithubService.html":{},"coverage.html":{},"overview.html":{}}}],["githubstrategy",{"_index":238,"title":{"injectables/GithubStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GithubStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["gitlab",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/Gitlabtrategy.html":{}}}],["gitlab.strategy",{"_index":248,"title":{},"body":{"modules/AuthModule.html":{}}}],["gitlab2",{"_index":414,"title":{},"body":{"injectables/Gitlabtrategy.html":{},"dependencies.html":{}}}],["gitlabauth",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["gitlabauth(@req",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["gitlabauth(req",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["gitlabauthcallback",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["gitlabauthcallback(@req",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["gitlabauthcallback(req",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["gitlablogin",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["gitlablogin(req",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["gitlabtrategy",{"_index":239,"title":{"injectables/Gitlabtrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/Gitlabtrategy.html":{},"coverage.html":{},"overview.html":{}}}],["google",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/YoutubeStrategy.html":{},"dependencies.html":{}}}],["google.strategy",{"_index":249,"title":{},"body":{"modules/AuthModule.html":{}}}],["googleapis",{"_index":692,"title":{},"body":{"dependencies.html":{}}}],["googleauth",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauth(@req",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauth(req",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthcallback",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthcallback(@req",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthcallback(req",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlee",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["googlelogin",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["googlelogin(req",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["googlestrategy",{"_index":240,"title":{"injectables/GoogleStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GoogleStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["guilds",{"_index":305,"title":{},"body":{"injectables/DiscordStrategy.html":{}}}],["guilds.join",{"_index":306,"title":{},"body":{"injectables/DiscordStrategy.html":{}}}],["headers",{"_index":381,"title":{},"body":{"injectables/GithubService.html":{},"injectables/SpotifyService.html":{}}}],["host",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["http://localhost:3000/auth/success?access_token",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpmodule",{"_index":356,"title":{},"body":{"modules/GithubModule.html":{},"modules/SpotifyModule.html":{}}}],["httpmodule.register",{"_index":358,"title":{},"body":{"modules/GithubModule.html":{},"modules/SpotifyModule.html":{}}}],["https://api.spotify.com/v1/search?q=${artist}&type=${type}&limit=20",{"_index":508,"title":{},"body":{"injectables/SpotifyService.html":{}}}],["https://api.spotify.com/v1/search?q=${search}&type=track&limit=20",{"_index":514,"title":{},"body":{"injectables/SpotifyService.html":{}}}],["httpservice",{"_index":366,"title":{},"body":{"injectables/GithubService.html":{},"injectables/SpotifyService.html":{}}}],["icons",{"_index":716,"title":{},"body":{"dependencies.html":{}}}],["id",{"_index":327,"title":{},"body":{"controllers/GithubController.html":{},"injectables/GithubService.html":{},"controllers/SpotifyController.html":{},"injectables/SpotifyService.html":{},"classes/User.html":{},"classes/UserDTO.html":{}}}],["identifier",{"_index":630,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":303,"title":{},"body":{"injectables/DiscordStrategy.html":{}}}],["ignoreexpiration",{"_index":450,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["import",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordStrategy.html":{},"controllers/GithubController.html":{},"modules/GithubModule.html":{},"injectables/GithubService.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"controllers/SpotifyController.html":{},"modules/SpotifyModule.html":{},"injectables/SpotifyService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/YoutubeStrategy.html":{}}}],["imports",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/GithubModule.html":{},"modules/SpotifyModule.html":{},"modules/UsersModule.html":{}}}],["incorrect",{"_index":577,"title":{},"body":{"controllers/UsersController.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordStrategy.html":{},"controllers/GithubController.html":{},"injectables/GithubService.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"controllers/SpotifyController.html":{},"injectables/SpotifyService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/YoutubeStrategy.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordStrategy.html":{},"controllers/GithubController.html":{},"modules/GithubModule.html":{},"injectables/GithubService.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"controllers/SpotifyController.html":{},"modules/SpotifyModule.html":{},"injectables/SpotifyService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/YoutubeStrategy.html":{}}}],["information",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectable",{"_index":91,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/DiscordStrategy.html":{},"injectables/GithubService.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"injectables/SpotifyService.html":{},"injectables/UsersService.html":{},"injectables/YoutubeStrategy.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/DiscordStrategy.html":{},"injectables/GithubService.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"injectables/SpotifyService.html":{},"injectables/UsersService.html":{},"injectables/YoutubeStrategy.html":{},"coverage.html":{}}}],["injectables",{"_index":92,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/DiscordStrategy.html":{},"injectables/GithubService.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"injectables/SpotifyService.html":{},"injectables/UsersService.html":{},"injectables/YoutubeStrategy.html":{},"overview.html":{}}}],["injectrepository",{"_index":616,"title":{},"body":{"injectables/UsersService.html":{}}}],["install",{"_index":694,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["isdefined",{"_index":531,"title":{},"body":{"classes/User.html":{},"classes/UserDTO.html":{}}}],["isstring",{"_index":532,"title":{},"body":{"classes/User.html":{},"classes/UserDTO.html":{}}}],["js",{"_index":689,"title":{},"body":{"dependencies.html":{}}}],["jwt",{"_index":445,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":29,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtconstants",{"_index":446,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":453,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{}}}],["jwtfromrequest",{"_index":448,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":594,"title":{},"body":{"modules/UsersModule.html":{}}}],["jwtmodule.register",{"_index":599,"title":{},"body":{"modules/UsersModule.html":{}}}],["jwtservice",{"_index":609,"title":{},"body":{"injectables/UsersService.html":{}}}],["jwtstrategy",{"_index":437,"title":{"injectables/JwtStrategy.html":{}},"body":{"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["lastname",{"_index":430,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["line",{"_index":409,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["linkedin",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LinkedinStrategy.html":{},"dependencies.html":{}}}],["linkedin.strategy",{"_index":250,"title":{},"body":{"modules/AuthModule.html":{}}}],["linkedinauth",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["linkedinauth(@req",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["linkedinauth(req",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["linkedinauthcallback",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["linkedinauthcallback(@req",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["linkedinauthcallback(req",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["linkedinlogin",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["linkedinlogin(req",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["linkedinstrategy",{"_index":241,"title":{"injectables/LinkedinStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LinkedinStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["literal",{"_index":95,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{}}}],["local",{"_index":677,"title":{},"body":{"dependencies.html":{}}}],["localhost",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["loginuser",{"_index":549,"title":{},"body":{"controllers/UsersController.html":{}}}],["loginuser(username",{"_index":556,"title":{},"body":{"controllers/UsersController.html":{}}}],["map",{"_index":377,"title":{},"body":{"injectables/GithubService.html":{},"injectables/SpotifyService.html":{}}}],["map((res",{"_index":384,"title":{},"body":{"injectables/GithubService.html":{}}}],["map((response",{"_index":510,"title":{},"body":{"injectables/SpotifyService.html":{}}}],["maps/api",{"_index":673,"title":{},"body":{"dependencies.html":{}}}],["matching",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordStrategy.html":{},"controllers/GithubController.html":{},"modules/GithubModule.html":{},"injectables/GithubService.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"controllers/SpotifyController.html":{},"modules/SpotifyModule.html":{},"injectables/SpotifyService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/YoutubeStrategy.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["maxredirects",{"_index":361,"title":{},"body":{"modules/GithubModule.html":{},"modules/SpotifyModule.html":{}}}],["message",{"_index":96,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/GithubService.html":{},"injectables/SpotifyService.html":{},"controllers/UsersController.html":{}}}],["metadata",{"_index":730,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordStrategy.html":{},"controllers/GithubController.html":{},"injectables/GithubService.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"controllers/SpotifyController.html":{},"injectables/SpotifyService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/YoutubeStrategy.html":{}}}],["minlength",{"_index":533,"title":{},"body":{"classes/User.html":{},"classes/UserDTO.html":{}}}],["minlength(1",{"_index":538,"title":{},"body":{"classes/User.html":{},"classes/UserDTO.html":{}}}],["minlength(5",{"_index":539,"title":{},"body":{"classes/User.html":{},"classes/UserDTO.html":{}}}],["miscellaneous",{"_index":744,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["model",{"_index":567,"title":{},"body":{"controllers/UsersController.html":{}}}],["module",{"_index":49,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GithubModule.html":{},"modules/SpotifyModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GithubModule.html":{},"modules/SpotifyModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":51,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GithubModule.html":{},"modules/SpotifyModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mui/material",{"_index":657,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordStrategy.html":{},"controllers/GithubController.html":{},"injectables/GithubService.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"controllers/SpotifyController.html":{},"injectables/SpotifyService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/YoutubeStrategy.html":{}}}],["name.familyname",{"_index":431,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["name.givenname",{"_index":429,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["nestjs/axios",{"_index":357,"title":{},"body":{"modules/GithubModule.html":{},"injectables/GithubService.html":{},"modules/SpotifyModule.html":{},"injectables/SpotifyService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordStrategy.html":{},"controllers/GithubController.html":{},"modules/GithubModule.html":{},"injectables/GithubService.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"controllers/SpotifyController.html":{},"modules/SpotifyModule.html":{},"injectables/SpotifyService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/YoutubeStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":661,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":595,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"injectables/DiscordStrategy.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"injectables/YoutubeStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":664,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":665,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjsx/crud",{"_index":566,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":582,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["next",{"_index":408,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["nrwl/nest",{"_index":670,"title":{},"body":{"dependencies.html":{}}}],["number",{"_index":525,"title":{},"body":{"classes/User.html":{},"classes/UserDTO.html":{}}}],["oauth",{"_index":699,"title":{},"body":{"dependencies.html":{}}}],["oauth2",{"_index":460,"title":{},"body":{"injectables/LinkedinStrategy.html":{},"dependencies.html":{}}}],["oauth20",{"_index":421,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/YoutubeStrategy.html":{},"dependencies.html":{}}}],["object",{"_index":771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observable",{"_index":320,"title":{},"body":{"controllers/GithubController.html":{},"injectables/GithubService.html":{},"controllers/SpotifyController.html":{},"injectables/SpotifyService.html":{}}}],["one",{"_index":623,"title":{},"body":{"injectables/UsersService.html":{}}}],["optional",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordStrategy.html":{},"controllers/GithubController.html":{},"injectables/GithubService.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"controllers/SpotifyController.html":{},"injectables/SpotifyService.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/YoutubeStrategy.html":{}}}],["out",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GithubModule.html":{},"modules/SpotifyModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["override",{"_index":562,"title":{},"body":{"controllers/UsersController.html":{}}}],["override('createonebase",{"_index":553,"title":{},"body":{"controllers/UsersController.html":{}}}],["overview",{"_index":764,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":651,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":319,"title":{},"body":{"controllers/GithubController.html":{},"controllers/SpotifyController.html":{},"controllers/UsersController.html":{}}}],["param('artist",{"_index":490,"title":{},"body":{"controllers/SpotifyController.html":{}}}],["param('id",{"_index":344,"title":{},"body":{"controllers/GithubController.html":{},"controllers/SpotifyController.html":{}}}],["param('password",{"_index":573,"title":{},"body":{"controllers/UsersController.html":{}}}],["param('reponame",{"_index":350,"title":{},"body":{"controllers/GithubController.html":{}}}],["param('token",{"_index":345,"title":{},"body":{"controllers/GithubController.html":{},"controllers/SpotifyController.html":{}}}],["param('type",{"_index":491,"title":{},"body":{"controllers/SpotifyController.html":{}}}],["param('username",{"_index":572,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordStrategy.html":{},"controllers/GithubController.html":{},"injectables/GithubService.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"controllers/SpotifyController.html":{},"injectables/SpotifyService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/YoutubeStrategy.html":{}}}],["parsedbody",{"_index":564,"title":{},"body":{"controllers/UsersController.html":{}}}],["parsedrequest",{"_index":563,"title":{},"body":{"controllers/UsersController.html":{}}}],["passport",{"_index":292,"title":{},"body":{"injectables/DiscordStrategy.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"injectables/YoutubeStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":290,"title":{},"body":{"injectables/DiscordStrategy.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["passportstrategy(strategy",{"_index":294,"title":{},"body":{"injectables/DiscordStrategy.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["password",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["payload",{"_index":443,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["payload.password",{"_index":455,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.type",{"_index":456,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":454,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pg",{"_index":708,"title":{},"body":{"dependencies.html":{}}}],["photos",{"_index":426,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["photos[0].value",{"_index":433,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["picture",{"_index":432,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["pipe",{"_index":383,"title":{},"body":{"injectables/GithubService.html":{},"injectables/SpotifyService.html":{}}}],["port",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["possible",{"_index":391,"title":{},"body":{"injectables/GithubService.html":{},"injectables/SpotifyService.html":{}}}],["postgres",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GithubController.html":{},"controllers/SpotifyController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":526,"title":{},"body":{"classes/User.html":{},"classes/UserDTO.html":{}}}],["private",{"_index":473,"title":{},"body":{"injectables/SpotidyStrategy.html":{},"injectables/UsersService.html":{}}}],["process.env.database_name",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.database_psw",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.database_usr",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.discord_callback_url",{"_index":301,"title":{},"body":{"injectables/DiscordStrategy.html":{}}}],["process.env.discord_client_id",{"_index":297,"title":{},"body":{"injectables/DiscordStrategy.html":{}}}],["process.env.discord_client_secret",{"_index":299,"title":{},"body":{"injectables/DiscordStrategy.html":{}}}],["process.env.github_callback_url",{"_index":407,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["process.env.github_client_id",{"_index":405,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["process.env.github_client_secret",{"_index":406,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["process.env.gitlab_callback_url",{"_index":417,"title":{},"body":{"injectables/Gitlabtrategy.html":{}}}],["process.env.gitlab_client_id",{"_index":415,"title":{},"body":{"injectables/Gitlabtrategy.html":{}}}],["process.env.gitlab_client_secret",{"_index":416,"title":{},"body":{"injectables/Gitlabtrategy.html":{}}}],["process.env.google_callback_url",{"_index":424,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["process.env.google_client_id",{"_index":422,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["process.env.google_client_secret",{"_index":423,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["process.env.linkedin_callback_url",{"_index":463,"title":{},"body":{"injectables/LinkedinStrategy.html":{}}}],["process.env.linkedin_client_id",{"_index":461,"title":{},"body":{"injectables/LinkedinStrategy.html":{}}}],["process.env.linkedin_client_secret",{"_index":462,"title":{},"body":{"injectables/LinkedinStrategy.html":{}}}],["process.env.prod",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.spotify_callback_url",{"_index":471,"title":{},"body":{"injectables/SpotidyStrategy.html":{}}}],["process.env.spotify_client_id",{"_index":469,"title":{},"body":{"injectables/SpotidyStrategy.html":{}}}],["process.env.spotify_client_secret",{"_index":470,"title":{},"body":{"injectables/SpotidyStrategy.html":{}}}],["production",{"_index":774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["profile",{"_index":285,"title":{},"body":{"injectables/DiscordStrategy.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["promise",{"_index":555,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promise((resolve",{"_index":583,"title":{},"body":{"controllers/UsersController.html":{}}}],["properties",{"_index":518,"title":{},"body":{"classes/User.html":{},"classes/UserDTO.html":{}}}],["provider=discord",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["provider=github",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["provider=gitlab",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["provider=google",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["provider=linkedin",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["provider=spotify",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["provider=youtube",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["providers",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GithubModule.html":{},"modules/SpotifyModule.html":{},"modules/UsersModule.html":{}}}],["r_emailaddress",{"_index":464,"title":{},"body":{"injectables/LinkedinStrategy.html":{}}}],["r_liteprofile",{"_index":465,"title":{},"body":{"injectables/LinkedinStrategy.html":{}}}],["randomcolor",{"_index":710,"title":{},"body":{"dependencies.html":{}}}],["react",{"_index":672,"title":{},"body":{"dependencies.html":{}}}],["read",{"_index":472,"title":{},"body":{"injectables/SpotidyStrategy.html":{}}}],["readonly",{"_index":38,"title":{},"body":{"controllers/AppController.html":{}}}],["reddit",{"_index":703,"title":{},"body":{"dependencies.html":{}}}],["redirect",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["reflect",{"_index":729,"title":{},"body":{"dependencies.html":{}}}],["refreshtoken",{"_index":284,"title":{},"body":{"injectables/DiscordStrategy.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["regenerator",{"_index":732,"title":{},"body":{"dependencies.html":{}}}],["rejects",{"_index":584,"title":{},"body":{"controllers/UsersController.html":{}}}],["rejects(err",{"_index":589,"title":{},"body":{"controllers/UsersController.html":{}}}],["repo",{"_index":611,"title":{},"body":{"injectables/UsersService.html":{}}}],["reponame",{"_index":374,"title":{},"body":{"injectables/GithubService.html":{}}}],["repository",{"_index":401,"title":{},"body":{"injectables/GithubService.html":{}}}],["req",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["req.user",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["request",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["res",{"_index":399,"title":{},"body":{"injectables/GithubService.html":{},"injectables/SpotifyService.html":{},"controllers/UsersController.html":{}}}],["res.data",{"_index":387,"title":{},"body":{"injectables/GithubService.html":{}}}],["res.data.login",{"_index":395,"title":{},"body":{"injectables/GithubService.html":{}}}],["res.token",{"_index":580,"title":{},"body":{"controllers/UsersController.html":{}}}],["res.type",{"_index":579,"title":{},"body":{"controllers/UsersController.html":{}}}],["reset",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GithubModule.html":{},"modules/SpotifyModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolve(res",{"_index":586,"title":{},"body":{"controllers/UsersController.html":{}}}],["response",{"_index":385,"title":{},"body":{"injectables/GithubService.html":{},"injectables/SpotifyService.html":{}}}],["response.data",{"_index":512,"title":{},"body":{"injectables/SpotifyService.html":{}}}],["response.data.artists.items",{"_index":513,"title":{},"body":{"injectables/SpotifyService.html":{}}}],["response.data.tracks.items",{"_index":515,"title":{},"body":{"injectables/SpotifyService.html":{}}}],["response.status.valueof",{"_index":511,"title":{},"body":{"injectables/SpotifyService.html":{}}}],["results",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordStrategy.html":{},"controllers/GithubController.html":{},"modules/GithubModule.html":{},"injectables/GithubService.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"controllers/SpotifyController.html":{},"modules/SpotifyModule.html":{},"injectables/SpotifyService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/YoutubeStrategy.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordStrategy.html":{},"controllers/GithubController.html":{},"injectables/GithubService.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"controllers/SpotifyController.html":{},"injectables/SpotifyService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/YoutubeStrategy.html":{}}}],["returns",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordStrategy.html":{},"controllers/GithubController.html":{},"injectables/GithubService.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"controllers/SpotifyController.html":{},"injectables/SpotifyService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/YoutubeStrategy.html":{}}}],["rnd",{"_index":718,"title":{},"body":{"dependencies.html":{}}}],["router",{"_index":720,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":758,"title":{},"body":{"index.html":{}}}],["runtime",{"_index":733,"title":{},"body":{"dependencies.html":{}}}],["rxjs",{"_index":336,"title":{},"body":{"controllers/GithubController.html":{},"injectables/GithubService.html":{},"controllers/SpotifyController.html":{},"injectables/SpotifyService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":378,"title":{},"body":{"injectables/GithubService.html":{},"injectables/SpotifyService.html":{}}}],["scope",{"_index":302,"title":{},"body":{"injectables/DiscordStrategy.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["search",{"_index":507,"title":{},"body":{"injectables/SpotifyService.html":{}}}],["searchartist",{"_index":499,"title":{},"body":{"injectables/SpotifyService.html":{}}}],["searchartist(artist",{"_index":502,"title":{},"body":{"injectables/SpotifyService.html":{}}}],["searchtrack",{"_index":500,"title":{},"body":{"injectables/SpotifyService.html":{}}}],["searchtrack(search",{"_index":505,"title":{},"body":{"injectables/SpotifyService.html":{}}}],["secret",{"_index":600,"title":{},"body":{"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["secretkey",{"_index":775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":452,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["service",{"_index":570,"title":{},"body":{"controllers/UsersController.html":{}}}],["shared/dashboardresponse.model",{"_index":338,"title":{},"body":{"controllers/GithubController.html":{},"injectables/GithubService.html":{},"controllers/SpotifyController.html":{},"injectables/SpotifyService.html":{}}}],["shared/github.models",{"_index":342,"title":{},"body":{"controllers/GithubController.html":{},"injectables/GithubService.html":{}}}],["shared/spotify.model",{"_index":486,"title":{},"body":{"controllers/SpotifyController.html":{},"injectables/SpotifyService.html":{}}}],["signoptions",{"_index":601,"title":{},"body":{"modules/UsersModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordStrategy.html":{},"controllers/GithubController.html":{},"modules/GithubModule.html":{},"injectables/GithubService.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"controllers/SpotifyController.html":{},"modules/SpotifyModule.html":{},"injectables/SpotifyService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/YoutubeStrategy.html":{}}}],["spinners",{"_index":722,"title":{},"body":{"dependencies.html":{}}}],["sporify",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["spotidystrategy",{"_index":242,"title":{"injectables/SpotidyStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/SpotidyStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["spotify",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SpotidyStrategy.html":{},"controllers/SpotifyController.html":{},"dependencies.html":{}}}],["spotify.controller",{"_index":497,"title":{},"body":{"modules/SpotifyModule.html":{}}}],["spotify.service",{"_index":488,"title":{},"body":{"controllers/SpotifyController.html":{},"modules/SpotifyModule.html":{}}}],["spotify.strategy",{"_index":251,"title":{},"body":{"modules/AuthModule.html":{}}}],["spotify/spotify.module",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["spotifyartist",{"_index":484,"title":{},"body":{"controllers/SpotifyController.html":{},"injectables/SpotifyService.html":{}}}],["spotifyauth",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["spotifyauth(@req",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["spotifyauth(req",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["spotifyauthcallback",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["spotifyauthcallback(@req",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["spotifyauthcallback(req",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["spotifycontroller",{"_index":474,"title":{"controllers/SpotifyController.html":{}},"body":{"controllers/SpotifyController.html":{},"modules/SpotifyModule.html":{},"coverage.html":{}}}],["spotifylogin",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["spotifylogin(req",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["spotifymodule",{"_index":58,"title":{"modules/SpotifyModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SpotifyModule.html":{},"modules.html":{},"overview.html":{}}}],["spotifysearch",{"_index":476,"title":{},"body":{"controllers/SpotifyController.html":{}}}],["spotifysearch(id",{"_index":478,"title":{},"body":{"controllers/SpotifyController.html":{}}}],["spotifysearchtrack",{"_index":477,"title":{},"body":{"controllers/SpotifyController.html":{}}}],["spotifysearchtrack(id",{"_index":481,"title":{},"body":{"controllers/SpotifyController.html":{}}}],["spotifyservice",{"_index":487,"title":{"injectables/SpotifyService.html":{}},"body":{"controllers/SpotifyController.html":{},"modules/SpotifyModule.html":{},"injectables/SpotifyService.html":{},"coverage.html":{},"overview.html":{}}}],["spotifytrack",{"_index":485,"title":{},"body":{"controllers/SpotifyController.html":{},"injectables/SpotifyService.html":{}}}],["started",{"_index":748,"title":{"index.html":{}},"body":{}}],["statements",{"_index":631,"title":{},"body":{"coverage.html":{}}}],["statuscode",{"_index":386,"title":{},"body":{"injectables/GithubService.html":{},"injectables/SpotifyService.html":{},"controllers/UsersController.html":{}}}],["strategy",{"_index":291,"title":{},"body":{"injectables/DiscordStrategy.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["string",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordStrategy.html":{},"controllers/GithubController.html":{},"injectables/GithubService.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"controllers/SpotifyController.html":{},"injectables/SpotifyService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"injectables/UsersService.html":{},"injectables/YoutubeStrategy.html":{}}}],["styled",{"_index":736,"title":{},"body":{"dependencies.html":{}}}],["success",{"_index":390,"title":{},"body":{"injectables/GithubService.html":{},"injectables/SpotifyService.html":{}}}],["super",{"_index":295,"title":{},"body":{"injectables/DiscordStrategy.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["super(repo",{"_index":618,"title":{},"body":{"injectables/UsersService.html":{}}}],["support",{"_index":761,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":762,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":739,"title":{},"body":{"dependencies.html":{}}}],["t",{"_index":753,"title":{},"body":{"index.html":{}}}],["table",{"_index":650,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":649,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":45,"title":{},"body":{"controllers/AppController.html":{}}}],["testroute",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["testroute(@req",{"_index":43,"title":{},"body":{"controllers/AppController.html":{}}}],["testroute(req",{"_index":16,"title":{},"body":{"controllers/AppController.html":{}}}],["this.appservice.getdata",{"_index":40,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.discordlogin(req",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.githublogin(req",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.gitlablogin(req",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.googlelogin(req",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.linkedinlogin(req",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.spotifylogin(req",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.youtubelogin(req",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.base.createonebase(req",{"_index":578,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.githubservice.getfollowers(param",{"_index":346,"title":{},"body":{"controllers/GithubController.html":{}}}],["this.githubservice.getfollowings(param",{"_index":347,"title":{},"body":{"controllers/GithubController.html":{}}}],["this.githubservice.getprofil(id",{"_index":348,"title":{},"body":{"controllers/GithubController.html":{}}}],["this.githubservice.getsearchrepo(id",{"_index":351,"title":{},"body":{"controllers/GithubController.html":{}}}],["this.githubservice.getuserrepos(id",{"_index":349,"title":{},"body":{"controllers/GithubController.html":{}}}],["this.httpservice",{"_index":379,"title":{},"body":{"injectables/GithubService.html":{},"injectables/SpotifyService.html":{}}}],["this.jwtservice.sign(payload",{"_index":622,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repo.findone",{"_index":624,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.service.generatetoken(res",{"_index":581,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.service.getoneuser(username",{"_index":575,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.spotifyservice.searchartist(id",{"_index":492,"title":{},"body":{"controllers/SpotifyController.html":{}}}],["this.spotifyservice.searchtrack(id",{"_index":493,"title":{},"body":{"controllers/SpotifyController.html":{}}}],["timeout",{"_index":359,"title":{},"body":{"modules/GithubModule.html":{},"modules/SpotifyModule.html":{}}}],["token",{"_index":316,"title":{},"body":{"controllers/GithubController.html":{},"injectables/GithubService.html":{},"controllers/SpotifyController.html":{},"injectables/SpotifyService.html":{},"classes/User.html":{},"classes/UserDTO.html":{}}}],["tradingview",{"_index":724,"title":{},"body":{"dependencies.html":{}}}],["transformer",{"_index":685,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":523,"title":{},"body":{"classes/User.html":{},"classes/UserDTO.html":{},"miscellaneous/variables.html":{}}}],["true})@isstring({always",{"_index":520,"title":{},"body":{"classes/User.html":{}}}],["true})@minlength(1",{"_index":521,"title":{},"body":{"classes/User.html":{}}}],["true})@minlength(5",{"_index":528,"title":{},"body":{"classes/User.html":{}}}],["try",{"_index":585,"title":{},"body":{"controllers/UsersController.html":{}}}],["tslib",{"_index":742,"title":{},"body":{"dependencies.html":{}}}],["twitch",{"_index":705,"title":{},"body":{"dependencies.html":{}}}],["twitchtv",{"_index":707,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DiscordStrategy.html":{},"controllers/GithubController.html":{},"injectables/GithubService.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"controllers/SpotifyController.html":{},"injectables/SpotifyService.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/YoutubeStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":537,"title":{},"body":{"classes/User.html":{},"classes/UserDTO.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormcrudservice",{"_index":605,"title":{},"body":{"injectables/UsersService.html":{}}}],["typeormmodule",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":598,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forroot",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["types/passport",{"_index":675,"title":{},"body":{"dependencies.html":{}}}],["types/randomcolor",{"_index":679,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/YoutubeStrategy.html":{},"dependencies.html":{}}}],["ui",{"_index":740,"title":{},"body":{"dependencies.html":{}}}],["undefined",{"_index":396,"title":{},"body":{"injectables/GithubService.html":{},"controllers/UsersController.html":{}}}],["unknown",{"_index":289,"title":{},"body":{"injectables/DiscordStrategy.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"controllers/UsersController.html":{},"injectables/YoutubeStrategy.html":{}}}],["unused",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["upwithout",{"_index":756,"title":{},"body":{"index.html":{}}}],["url",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["useguards(authguard('discord",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard('github",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard('gitlab",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard('google",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard('linkedin",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard('spotify",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard",{"_index":42,"title":{},"body":{"controllers/AppController.html":{}}}],["user",{"_index":71,"title":{"classes/User.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/DiscordStrategy.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/YoutubeStrategy.html":{},"coverage.html":{}}}],["user.password",{"_index":620,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.type",{"_index":621,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.username",{"_index":619,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto",{"_index":441,"title":{"classes/UserDTO.html":{}},"body":{"injectables/JwtStrategy.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["username",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":593,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":560,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/constants",{"_index":447,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["users/user",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{}}}],["users/users.module",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":546,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":59,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":559,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["valid",{"_index":46,"title":{},"body":{"controllers/AppController.html":{}}}],["validate",{"_index":280,"title":{},"body":{"injectables/DiscordStrategy.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["validate(accesstoken",{"_index":283,"title":{},"body":{"injectables/DiscordStrategy.html":{},"injectables/GithubStrategy.html":{},"injectables/Gitlabtrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LinkedinStrategy.html":{},"injectables/SpotidyStrategy.html":{},"injectables/YoutubeStrategy.html":{}}}],["validate(payload",{"_index":440,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validator",{"_index":534,"title":{},"body":{"classes/User.html":{},"classes/UserDTO.html":{},"dependencies.html":{}}}],["value",{"_index":773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":639,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":767,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["welcome",{"_index":97,"title":{},"body":{"injectables/AppService.html":{}}}],["widget",{"_index":725,"title":{},"body":{"dependencies.html":{}}}],["wrong",{"_index":400,"title":{},"body":{"injectables/GithubService.html":{}}}],["yarn",{"_index":757,"title":{},"body":{"index.html":{}}}],["youtube",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["youtube.strategy",{"_index":252,"title":{},"body":{"modules/AuthModule.html":{}}}],["youtubeauth",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["youtubeauth(@req",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["youtubeauth(req",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["youtubeauthcallback",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["youtubeauthcallback(@req",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{}}}],["youtubeauthcallback(req",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["youtubelogin",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["youtubelogin(req",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["youtubestrategy",{"_index":243,"title":{"injectables/YoutubeStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/YoutubeStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["zoom",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GithubModule.html":{},"modules/SpotifyModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData\n                            \n                            \n                                testRoute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getData\n                        \n                    \n                \n            \n            \n                \ngetData()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in apps/api/src/app/app.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testRoute\n                        \n                    \n                \n            \n            \n                \ntestRoute(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/tests')@UseGuards(JwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in apps/api/src/app/app.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Req, UseGuards } from '@nestjs/common';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { Request } from 'express';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getData() {\n    return this.appService.getData();\n  }\n\n  @Get('/tests')\n  @UseGuards(JwtAuthGuard)\n  testRoute(@Req() req: Request) {\n    console.log(req)\n    return ('test valid')\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nGithubModule\n\nGithubModule\n\nAppModule -->\n\nGithubModule->AppModule\n\n\n\n\n\nSpotifyModule\n\nSpotifyModule\n\nAppModule -->\n\nSpotifyModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/app/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            GithubModule\n                        \n                        \n                            SpotifyModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { config } from 'dotenv';\nimport { AuthModule } from '../auth/auth.module';\nimport { User } from '../users/user';\nimport { UsersModule } from '../users/users.module';\nimport { GithubModule } from '../github/github.module';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { SpotifyModule } from '../spotify/spotify.module';\n\nconfig();\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'postgres',\n      host: process.env.PROD ? 'postgres' : 'localhost',\n      port: 5432,\n      username: process.env.DATABASE_USR,\n      password: process.env.DATABASE_PSW,\n      database: process.env.DATABASE_NAME,\n      entities: [User],\n    }),\n    AuthModule,\n    UsersModule,\n    GithubModule,\n    SpotifyModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getData\n                        \n                    \n                \n            \n            \n                \ngetData()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/app/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     literal type\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getData(): { message: string } {\n    return { message: 'Welcome to api!' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                discordAuth\n                            \n                            \n                                discordAuthCallback\n                            \n                            \n                                    Async\n                                githubAuth\n                            \n                            \n                                githubAuthCallback\n                            \n                            \n                                    Async\n                                gitlabAuth\n                            \n                            \n                                gitlabAuthCallback\n                            \n                            \n                                    Async\n                                googleAuth\n                            \n                            \n                                googleAuthCallback\n                            \n                            \n                                    Async\n                                linkedinAuth\n                            \n                            \n                                linkedinAuthCallback\n                            \n                            \n                                    Async\n                                spotifyAuth\n                            \n                            \n                                spotifyAuthCallback\n                            \n                            \n                                    Async\n                                youtubeAuth\n                            \n                            \n                                youtubeAuthCallback\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        discordAuth\n                        \n                    \n                \n            \n            \n                \n                    \n                    discordAuth(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/discord')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in apps/api/src/auth/auth.controller.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        discordAuthCallback\n                        \n                    \n                \n            \n            \n                \ndiscordAuthCallback(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/discord/redirect')@UseGuards(undefined)@Redirect()\n                \n            \n\n            \n                \n                    Defined in apps/api/src/auth/auth.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { url: string; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        githubAuth\n                        \n                    \n                \n            \n            \n                \n                    \n                    githubAuth(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/github')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in apps/api/src/auth/auth.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        githubAuthCallback\n                        \n                    \n                \n            \n            \n                \ngithubAuthCallback(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/github/redirect')@UseGuards(undefined)@Redirect()\n                \n            \n\n            \n                \n                    Defined in apps/api/src/auth/auth.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { url: string; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        gitlabAuth\n                        \n                    \n                \n            \n            \n                \n                    \n                    gitlabAuth(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/gitlab')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in apps/api/src/auth/auth.controller.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gitlabAuthCallback\n                        \n                    \n                \n            \n            \n                \ngitlabAuthCallback(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/gitlab/redirect')@UseGuards(undefined)@Redirect()\n                \n            \n\n            \n                \n                    Defined in apps/api/src/auth/auth.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { url: string; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        googleAuth\n                        \n                    \n                \n            \n            \n                \n                    \n                    googleAuth(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/google')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in apps/api/src/auth/auth.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        googleAuthCallback\n                        \n                    \n                \n            \n            \n                \ngoogleAuthCallback(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('redirect')@UseGuards(undefined)@Redirect()\n                \n            \n\n            \n                \n                    Defined in apps/api/src/auth/auth.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { url: string; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        linkedinAuth\n                        \n                    \n                \n            \n            \n                \n                    \n                    linkedinAuth(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/linkedin')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in apps/api/src/auth/auth.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        linkedinAuthCallback\n                        \n                    \n                \n            \n            \n                \nlinkedinAuthCallback(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/linkedin/redirect')@UseGuards(undefined)@Redirect()\n                \n            \n\n            \n                \n                    Defined in apps/api/src/auth/auth.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { url: string; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        spotifyAuth\n                        \n                    \n                \n            \n            \n                \n                    \n                    spotifyAuth(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/spotify')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in apps/api/src/auth/auth.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        spotifyAuthCallback\n                        \n                    \n                \n            \n            \n                \nspotifyAuthCallback(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/spotify/redirect')@UseGuards(undefined)@Redirect()\n                \n            \n\n            \n                \n                    Defined in apps/api/src/auth/auth.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { url: string; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        youtubeAuth\n                        \n                    \n                \n            \n            \n                \n                    \n                    youtubeAuth(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/youtube')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in apps/api/src/auth/auth.controller.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        youtubeAuthCallback\n                        \n                    \n                \n            \n            \n                \nyoutubeAuthCallback(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/youtube/redirect')@UseGuards(undefined)@Redirect()\n                \n            \n\n            \n                \n                    Defined in apps/api/src/auth/auth.controller.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { url: string; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-empty-function */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Controller, Get, Redirect, Req, UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { AuthService } from './auth.service';\nimport { Request } from 'express';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  // Google Connection\n  @Get('/google')\n  @UseGuards(AuthGuard('google'))\n  async googleAuth(@Req() req: Request) {}\n\n  @Get('redirect')\n  @UseGuards(AuthGuard('google'))\n  @Redirect()\n  googleAuthCallback(@Req() req: Request) {\n    const body = this.authService.googleLogin(req);\n    return {\n      url:\n        'http://localhost:3000/auth/success?access_token=' +\n        body.user.accessToken +\n        '&provider=google',\n    };\n  }\n\n  // Github Connection\n  @Get('/github')\n  @UseGuards(AuthGuard('github'))\n  async githubAuth(@Req() req: Request) {}\n\n  @Get('/github/redirect')\n  @UseGuards(AuthGuard('github'))\n  @Redirect()\n  githubAuthCallback(@Req() req: Request) {\n    const body = this.authService.githubLogin(req);\n    return {\n      url:\n        'http://localhost:3000/auth/success?access_token=' +\n        body.user.accessToken +\n        '&provider=github',\n    };\n  }\n\n  // Spotify Connection\n  @Get('/spotify')\n  @UseGuards(AuthGuard('spotify'))\n  async spotifyAuth(@Req() req: Request) {}\n\n  @Get('/spotify/redirect')\n  @UseGuards(AuthGuard('spotify'))\n  @Redirect()\n  spotifyAuthCallback(@Req() req: Request) {\n    const body = this.authService.spotifyLogin(req);\n    return {\n      url:\n        'http://localhost:3000/auth/success?access_token=' +\n        body.user.accessToken +\n        '&provider=spotify',\n    };\n  }\n\n  // Linkedin Connection\n  @Get('/linkedin')\n  @UseGuards(AuthGuard('linkedin'))\n  async linkedinAuth(@Req() req: Request) {}\n\n  @Get('/linkedin/redirect')\n  @UseGuards(AuthGuard('linkedin'))\n  @Redirect()\n  linkedinAuthCallback(@Req() req: Request) {\n    const body = this.authService.linkedinLogin(req);\n    return {\n      url:\n        'http://localhost:3000/auth/success?access_token=' +\n        body.user.accessToken +\n        '&provider=linkedin',\n    };\n  }\n\n  // Discord Connection\n  @Get('/discord')\n  @UseGuards(AuthGuard('discord'))\n  async discordAuth(@Req() req: Request) {}\n\n  @Get('/discord/redirect')\n  @UseGuards(AuthGuard('discord'))\n  @Redirect()\n  discordAuthCallback(@Req() req: Request) {\n    const body = this.authService.discordLogin(req);\n    return {\n      url:\n        'http://localhost:3000/auth/success?access_token=' +\n        body.user.accessToken +\n        '&provider=discord',\n    };\n  }\n\n  // Gitlab Connection\n  @Get('/gitlab')\n  @UseGuards(AuthGuard('gitlab'))\n  async gitlabAuth(@Req() req: Request) {}\n\n  @Get('/gitlab/redirect')\n  @UseGuards(AuthGuard('gitlab'))\n  @Redirect()\n  gitlabAuthCallback(@Req() req: Request) {\n    const body = this.authService.gitlabLogin(req);\n    return {\n      url:\n        'http://localhost:3000/auth/success?access_token=' +\n        body.user.accessToken +\n        '&provider=gitlab',\n    };\n  }\n\n  // Youtube Connection\n  @Get('/youtube')\n  @UseGuards(AuthGuard('google'))\n  async youtubeAuth(@Req() req: Request) {}\n\n  @Get('/youtube/redirect')\n  @UseGuards(AuthGuard('google'))\n  @Redirect()\n  youtubeAuthCallback(@Req() req: Request) {\n    const body = this.authService.youtubeLogin(req);\n    return {\n      url:\n        'http://localhost:3000/auth/success?access_token=' +\n        body.user.accessToken +\n        '&provider=youtube',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nDiscordStrategy\n\nDiscordStrategy\n\nAuthModule -->\n\nDiscordStrategy->AuthModule\n\n\n\n\n\nGithubStrategy\n\nGithubStrategy\n\nAuthModule -->\n\nGithubStrategy->AuthModule\n\n\n\n\n\nGitlabtrategy\n\nGitlabtrategy\n\nAuthModule -->\n\nGitlabtrategy->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nLinkedinStrategy\n\nLinkedinStrategy\n\nAuthModule -->\n\nLinkedinStrategy->AuthModule\n\n\n\n\n\nSpotidyStrategy\n\nSpotidyStrategy\n\nAuthModule -->\n\nSpotidyStrategy->AuthModule\n\n\n\n\n\nYoutubeStrategy\n\nYoutubeStrategy\n\nAuthModule -->\n\nYoutubeStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            DiscordStrategy\n                        \n                        \n                            GithubStrategy\n                        \n                        \n                            Gitlabtrategy\n                        \n                        \n                            GoogleStrategy\n                        \n                        \n                            LinkedinStrategy\n                        \n                        \n                            SpotidyStrategy\n                        \n                        \n                            YoutubeStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { DiscordStrategy } from './discord.strategy';\nimport { GithubStrategy } from './github.strategy';\nimport { Gitlabtrategy } from './gitlab.strategy';\nimport { GoogleStrategy } from './google.strategy';\nimport { LinkedinStrategy } from './linkedin.strategy';\nimport { SpotidyStrategy } from './spotify.strategy';\nimport { YoutubeStrategy } from './youtube.strategy';\n\n@Module({\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    GoogleStrategy,\n    GithubStrategy,\n    SpotidyStrategy,\n    LinkedinStrategy,\n    DiscordStrategy,\n    Gitlabtrategy,\n    YoutubeStrategy,\n  ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                discordLogin\n                            \n                            \n                                githubLogin\n                            \n                            \n                                gitlabLogin\n                            \n                            \n                                googleLogin\n                            \n                            \n                                linkedinLogin\n                            \n                            \n                                spotifyLogin\n                            \n                            \n                                youtubeLogin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        discordLogin\n                        \n                    \n                \n            \n            \n                \ndiscordLogin(req: Request)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/auth.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        githubLogin\n                        \n                    \n                \n            \n            \n                \ngithubLogin(req: Request)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/auth.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gitlabLogin\n                        \n                    \n                \n            \n            \n                \ngitlabLogin(req: Request)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/auth.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        googleLogin\n                        \n                    \n                \n            \n            \n                \ngoogleLogin(req: Request)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/auth.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        linkedinLogin\n                        \n                    \n                \n            \n            \n                \nlinkedinLogin(req: Request)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/auth.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        spotifyLogin\n                        \n                    \n                \n            \n            \n                \nspotifyLogin(req: Request)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/auth.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        youtubeLogin\n                        \n                    \n                \n            \n            \n                \nyoutubeLogin(req: Request)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/auth.service.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Request } from 'express';\n\n@Injectable()\nexport class AuthService {\n  googleLogin(req: Request): { message: string; user: any } {\n    if (!req.user)\n      return {\n        message: 'no user from Google',\n        user: {},\n      };\n    return {\n      message: 'User information from googlee',\n      user: req.user,\n    };\n  }\n\n  githubLogin(req: Request): { message: string; user: any } {\n    if (!req.user)\n      return {\n        message: 'no user from github',\n        user: {},\n      };\n    return {\n      message: 'User information from github',\n      user: req.user,\n    };\n  }\n\n  spotifyLogin(req: Request): { message: string; user: any } {\n    if (!req.user)\n      return {\n        message: 'no user for sporify',\n        user: {},\n      };\n    return {\n      message: 'User information from Spotify',\n      user: req.user,\n    };\n  }\n\n  linkedinLogin(req: Request): { message: string; user: any } {\n    if (!req.user)\n      return {\n        message: 'no user for linkedin',\n        user: {},\n      };\n    return {\n      message: 'User information from linkedin',\n      user: req.user,\n    };\n  }\n\n  discordLogin(req: Request): { message: string; user: any } {\n    if (!req.user)\n      return {\n        message: 'no user for discord',\n        user: {},\n      };\n    return {\n      message: 'User information from discord',\n      user: req.user,\n    };\n  }\n\n  gitlabLogin(req: Request): { message: string; user: any } {\n    if (!req.user)\n      return {\n        message: 'no user for gitlab',\n        user: {},\n      };\n    return {\n      message: 'User information from gitlab',\n      user: req.user,\n    };\n  }\n\n  youtubeLogin(req: Request): { message: string; user: any } {\n    if (!req.user)\n      return {\n        message: 'no user for youtube',\n        user: {},\n      };\n    return {\n      message: 'User information from youtube',\n      user: req.user,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DiscordStrategy.html":{"url":"injectables/DiscordStrategy.html","title":"injectable - DiscordStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  DiscordStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/discord.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/discord.strategy.ts:10\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, refreshToken: string, profile: any, done: any)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/discord.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { config } from 'dotenv';\nimport { Strategy } from 'passport-discord';\n\nconfig();\n\n@Injectable()\nexport class DiscordStrategy extends PassportStrategy(Strategy, 'discord') {\n  constructor() {\n    super({\n      clientID: process.env.DISCORD_CLIENT_ID,\n      clientSecret: process.env.DISCORD_CLIENT_SECRET,\n      callbackURL: process.env.DISCORD_CALLBACK_URL,\n      scope: ['identify', 'email', 'guilds', 'guilds.join'],\n    });\n  }\n\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: any,\n    done: any\n  ) {\n    const user = {\n      profile,\n      accessToken,\n    };\n    return done(null, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GithubController.html":{"url":"controllers/GithubController.html","title":"controller - GithubController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GithubController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/github/github.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                github\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getFollowers\n                            \n                            \n                                getFollowings\n                            \n                            \n                                getProfil\n                            \n                            \n                                getSpecificRepo\n                            \n                            \n                                getUserRepos\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getFollowers\n                        \n                    \n                \n            \n            \n                \ngetFollowers(param: string, token: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user/:id/followers/:token')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/github/github.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    param\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getFollowings\n                        \n                    \n                \n            \n            \n                \ngetFollowings(param: string, token: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user/:id/followings/:token')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/github/github.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    param\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProfil\n                        \n                    \n                \n            \n            \n                \ngetProfil(id: string, token: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user/:id/:token')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/github/github.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSpecificRepo\n                        \n                    \n                \n            \n            \n                \ngetSpecificRepo(id: string, name: string, token: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user/:id/:repoName/:token')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/github/github.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserRepos\n                        \n                    \n                \n            \n            \n                \ngetUserRepos(id: string, token: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user/:id/repos/:token')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/github/github.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from '@nestjs/common';\nimport { GithubService } from './github.service';\nimport { Observable } from 'rxjs';\nimport { DashBoardResponse } from './../../../../shared/DashboardResponse.model';\nimport {\n  GithubFollower,\n  GithubProfil,\n  GithubRepo,\n} from './../../../../shared/github.models';\n\n@Controller('github')\nexport class GithubController {\n  constructor(private githubService: GithubService) {}\n\n  @Get('/user/:id/followers/:token')\n  getFollowers(\n    @Param('id') param: string,\n    @Param('token') token: string\n  ): Observable> {\n    return this.githubService.getFollowers(param, token);\n  }\n\n  @Get('/user/:id/followings/:token')\n  getFollowings(\n    @Param('id') param: string,\n    @Param('token') token: string\n  ): Observable> {\n    return this.githubService.getFollowings(param, token);\n  }\n\n  @Get('/user/:id/:token')\n  getProfil(\n    @Param('id') id: string,\n    @Param('token') token: string\n  ): Observable> {\n    return this.githubService.getProfil(id, token);\n  }\n\n  @Get('/user/:id/repos/:token')\n  getUserRepos(\n    @Param('id') id: string,\n    @Param('token') token: string\n  ): Observable> {\n    return this.githubService.getUserRepos(id, token);\n  }\n\n  @Get('/user/:id/:repoName/:token')\n  getSpecificRepo(\n    @Param('id') id: string,\n    @Param('repoName') name: string,\n    @Param('token') token: string\n  ): Observable> {\n    return this.githubService.getSearchRepo(id, name, token);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GithubModule.html":{"url":"modules/GithubModule.html","title":"module - GithubModule","body":"\n                   \n\n\n\n\n    Modules\n    GithubModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_GithubModule\n\n\n\ncluster_GithubModule_providers\n\n\n\n\nGithubService\n\nGithubService\n\n\n\nGithubModule\n\nGithubModule\n\nGithubModule -->\n\nGithubService->GithubModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/github/github.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GithubService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GithubController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GithubService } from './github.service';\nimport { GithubController } from './github.controller';\nimport { HttpModule } from '@nestjs/axios';\n\n@Module({\n  imports: [HttpModule.register({\n    timeout: 5000,\n    maxRedirects: 5,\n  })],\n  providers: [GithubService],\n  controllers: [GithubController]\n})\nexport class GithubModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GithubService.html":{"url":"injectables/GithubService.html","title":"injectable - GithubService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GithubService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/github/github.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getFollowers\n                            \n                            \n                                getFollowings\n                            \n                            \n                                getProfil\n                            \n                            \n                                getSearchRepo\n                            \n                            \n                                getUserRepos\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/github/github.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getFollowers\n                        \n                    \n                \n            \n            \n                \ngetFollowers(id: string, token: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/github/github.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getFollowings\n                        \n                    \n                \n            \n            \n                \ngetFollowings(id: string, token: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/github/github.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProfil\n                        \n                    \n                \n            \n            \n                \ngetProfil(id: string, token: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/github/github.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSearchRepo\n                        \n                    \n                \n            \n            \n                \ngetSearchRepo(id: string, repoName: string, token: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/github/github.service.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repoName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserRepos\n                        \n                    \n                \n            \n            \n                \ngetUserRepos(id: string, token: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/github/github.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { Injectable } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport {\n  GithubFollower,\n  GithubProfil,\n  GithubRepo,\n} from './../../../../shared/github.models';\nimport { DashBoardResponse } from './../../../../shared/DashboardResponse.model';\n\n@Injectable()\nexport class GithubService {\n  constructor(private httpService: HttpService) {}\n\n  getFollowers(id: string, token: string): Observable> {\n    return this.httpService\n      .get(`https://api.github.com/users/${id}/followers`, {\n        headers: {\n          Authorization: `token ${token}`,\n        },\n      })\n      .pipe(\n        map((res) => {\n          const response: DashBoardResponse = {\n            statusCode: res.data !== [] ? 200 : 400,\n            message: res.data !== [] ? 'success' : 'Possible bad id',\n            response: res.data,\n          };\n          return response;\n        })\n      );\n  }\n\n  getFollowings(id: string, token: string): Observable> {\n    return this.httpService\n      .get(`https://api.github.com/users/${id}/following`, {\n        headers: {\n          Authorization: `token ${token}`,\n        },\n      })\n      .pipe(\n        map((res) => {\n          const response: DashBoardResponse = {\n            statusCode: res.data !== [] ? 200 : 400,\n            message: res.data !== [] ? 'success' : 'Possible bad id',\n            response: res.data,\n          };\n          return response;\n        })\n      );\n  }\n\n  getProfil(id: string, token: string): Observable> {\n    return this.httpService\n      .get(`https://api.github.com/users/${id}`, {\n        headers: {\n          Authorization: `token ${token}`,\n        },\n      })\n      .pipe(\n        map((res) => {\n          if (res.data.login === undefined) {\n            const response: DashBoardResponse = {\n              statusCode: 400,\n              message: 'Possible bad id',\n              response: res.data,\n            };\n            return response;\n          } else {\n            const response: DashBoardResponse = {\n              statusCode: 200,\n              message: 'success',\n              response: res.data,\n            };\n            return response;\n          }\n        })\n      );\n  }\n\n  getUserRepos(id: string, token: string): Observable> {\n    return this.httpService\n      .get(`https://api.github.com/users/${id}/repos`, {\n        headers: {\n          Authorization: `token ${token}`,\n        },\n      })\n      .pipe(\n        map((res) => {\n          if (res.data === []) {\n            const response: DashBoardResponse = {\n              statusCode: 400,\n              message: 'Possible bad id',\n              response: [],\n            };\n            return response;\n          } else {\n            const response: DashBoardResponse = {\n              statusCode: 200,\n              message: 'success',\n              response: res.data,\n            };\n            return response;\n          }\n        })\n      );\n  }\n\n  getSearchRepo(\n    id: string,\n    repoName: string,\n    token: string\n  ): Observable> {\n    return this.httpService\n      .get(`https://api.github.com/repos/${id}/${repoName}`, {\n        headers: {\n          Authorization: `token ${token}`,\n        },\n      })\n      .pipe(\n        map((res) => {\n          if (res === undefined) {\n            const response: DashBoardResponse = {\n              statusCode: 400,\n              message: 'Possible by id or wrong repository name',\n              response: {} as GithubRepo,\n            };\n            return response;\n          } else {\n            const response: DashBoardResponse = {\n              statusCode: 200,\n              message: 'success',\n              response: res.data,\n            };\n            return response;\n          }\n        })\n      );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GithubStrategy.html":{"url":"injectables/GithubStrategy.html","title":"injectable - GithubStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GithubStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/github.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/github.strategy.ts:10\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, refreshToken: string, profile: any, done: any)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/github.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { config } from 'dotenv';\nimport { Strategy } from 'passport-github';\n\nconfig();\n\n@Injectable()\nexport class GithubStrategy extends PassportStrategy(Strategy, 'github') {\n  constructor() {\n    super({\n      clientID: process.env.GITHUB_CLIENT_ID,\n      clientSecret: process.env.GITHUB_CLIENT_SECRET,\n      callbackURL: process.env.GITHUB_CALLBACK_URL,\n      scope: ['profile', 'email'],\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: any,\n    done: any\n  ) {\n    const user = {\n      profile,\n      accessToken,\n    };\n    return done(null, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Gitlabtrategy.html":{"url":"injectables/Gitlabtrategy.html","title":"injectable - Gitlabtrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  Gitlabtrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/gitlab.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/gitlab.strategy.ts:10\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, refreshToken: string, profile: any, done: any)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/gitlab.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { config } from 'dotenv';\nimport { Strategy } from 'passport-gitlab2';\n\nconfig();\n\n@Injectable()\nexport class Gitlabtrategy extends PassportStrategy(Strategy, 'gitlab') {\n  constructor() {\n    super({\n      clientID: process.env.GITLAB_CLIENT_ID,\n      clientSecret: process.env.GITLAB_CLIENT_SECRET,\n      callbackURL: process.env.GITLAB_CALLBACK_URL,\n      scope: ['api'],\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: any,\n    done: any\n  ) {\n    const user = {\n      profile,\n      accessToken,\n    };\n    return done(null, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleStrategy.html":{"url":"injectables/GoogleStrategy.html","title":"injectable - GoogleStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GoogleStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/google.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/google.strategy.ts:9\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, refreshToken: string, profile: any, done: any)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/google.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { config } from 'dotenv';\nimport { Strategy } from 'passport-google-oauth20';\n\nconfig();\n\n@Injectable()\nexport class GoogleStrategy extends PassportStrategy(Strategy, 'google') {\n  constructor() {\n    super({\n      clientID: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n      callbackURL: process.env.GOOGLE_CALLBACK_URL,\n      scope: ['profile', 'email'],\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async validate(accessToken: string, refreshToken: string, profile: any, done: any) {\n    const { emails, name, photos } = profile;\n    const user = {\n      email: emails[0].value,\n      firstName: name.givenName,\n      lastName: name.familyName,\n      picture: photos[0].value,\n      accessToken\n    }\n    return done(null, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/jwt.strategy.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: UserDTO)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/jwt.strategy.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { UserDTO } from '../users/user';\nimport { jwtConstants } from '../users/constants';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConstants.secret,\n    });\n  }\n\n  async validate(payload: UserDTO) {\n    return {\n      username: payload.username,\n      password: payload.password,\n      email: payload.password,\n      type: payload.type,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LinkedinStrategy.html":{"url":"injectables/LinkedinStrategy.html","title":"injectable - LinkedinStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LinkedinStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/linkedin.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/linkedin.strategy.ts:10\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, refreshToken: string, profile: any, done: any)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/linkedin.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { config } from 'dotenv';\nimport { Strategy } from 'passport-linkedin-oauth2';\n\nconfig();\n\n@Injectable()\nexport class LinkedinStrategy extends PassportStrategy(Strategy, 'linkedin') {\n  constructor() {\n    super({\n      clientID: process.env.LINKEDIN_CLIENT_ID,\n      clientSecret: process.env.LINKEDIN_CLIENT_SECRET,\n      callbackURL: process.env.LINKEDIN_CALLBACK_URL,\n      scope: ['r_emailaddress', 'r_liteprofile'],\n    });\n  }\n\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: any,\n    done: any\n  ) {\n    const user = {\n      profile,\n      accessToken,\n    };\n    return done(null, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SpotidyStrategy.html":{"url":"injectables/SpotidyStrategy.html","title":"injectable - SpotidyStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SpotidyStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/spotify.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/spotify.strategy.ts:10\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, refreshToken: string, profile: any, done: any)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/spotify.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { config } from 'dotenv';\nimport { Strategy } from 'passport-spotify';\n\nconfig();\n\n@Injectable()\nexport class SpotidyStrategy extends PassportStrategy(Strategy, 'spotify') {\n  constructor() {\n    super({\n      clientID: process.env.SPOTIFY_CLIENT_ID,\n      clientSecret: process.env.SPOTIFY_CLIENT_SECRET,\n      callbackURL: process.env.SPOTIFY_CALLBACK_URL,\n      scope: ['user-read-email', 'user-read-private'],\n    });\n  }\n\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: any,\n    done: any\n  ) {\n    const user = {\n      profile,\n      accessToken,\n    };\n    return done(null, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SpotifyController.html":{"url":"controllers/SpotifyController.html","title":"controller - SpotifyController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SpotifyController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/spotify/spotify.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                spotify\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                spotifySearch\n                            \n                            \n                                spotifySearchTrack\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        spotifySearch\n                        \n                    \n                \n            \n            \n                \nspotifySearch(id: string, token: string, type: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search/:artist/:type/:token')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/spotify/spotify.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        spotifySearchTrack\n                        \n                    \n                \n            \n            \n                \nspotifySearchTrack(id: string, token: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/track/:id/:token')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/spotify/spotify.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { DashBoardResponse } from 'shared/DashboardResponse.model';\nimport { SpotifyArtist, SpotifyTrack } from 'shared/spotify.model';\nimport { SpotifyService } from './spotify.service';\n\n@Controller('spotify')\nexport class SpotifyController {\n  constructor(private spotifyService: SpotifyService) {}\n\n  @Get('/search/:artist/:type/:token')\n  spotifySearch(\n    @Param('artist') id: string,\n    @Param('token') token: string,\n    @Param('type') type: string,\n  ): Observable> {\n    return this.spotifyService.searchArtist(id, token, type);\n  }\n\n  @Get('/track/:id/:token')\n  spotifySearchTrack(\n    @Param('id') id: string,\n    @Param('token') token: string,\n  ): Observable> {\n    return this.spotifyService.searchTrack(id, token);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SpotifyModule.html":{"url":"modules/SpotifyModule.html","title":"module - SpotifyModule","body":"\n                   \n\n\n\n\n    Modules\n    SpotifyModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SpotifyModule\n\n\n\ncluster_SpotifyModule_providers\n\n\n\n\nSpotifyService\n\nSpotifyService\n\n\n\nSpotifyModule\n\nSpotifyModule\n\nSpotifyModule -->\n\nSpotifyService->SpotifyModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/spotify/spotify.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SpotifyService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SpotifyController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SpotifyService } from './spotify.service';\nimport { SpotifyController } from './spotify.controller';\nimport { HttpModule } from '@nestjs/axios';\n\n@Module({\n  imports: [HttpModule.register({\n    timeout: 5000,\n    maxRedirects: 5,\n  })],\n  providers: [SpotifyService],\n  controllers: [SpotifyController]\n})\nexport class SpotifyModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SpotifyService.html":{"url":"injectables/SpotifyService.html","title":"injectable - SpotifyService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SpotifyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/spotify/spotify.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                searchArtist\n                            \n                            \n                                searchTrack\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/spotify/spotify.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        searchArtist\n                        \n                    \n                \n            \n            \n                \nsearchArtist(artist: string, token: string, type: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/spotify/spotify.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    artist\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        searchTrack\n                        \n                    \n                \n            \n            \n                \nsearchTrack(search: string, token: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/spotify/spotify.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    search\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { SpotifyArtist, SpotifyTrack } from './../../../../shared/spotify.model';\nimport { HttpService } from '@nestjs/axios';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { DashBoardResponse } from 'shared/DashboardResponse.model';\n\n@Injectable()\nexport class SpotifyService {\n  constructor(private httpService: HttpService) {}\n\n  searchArtist(\n    artist: string,\n    token: string,\n    type: string\n  ): Observable> {\n    return this.httpService\n      .get(\n        `https://api.spotify.com/v1/search?q=${artist}&type=${type}&limit=20`,\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      )\n      .pipe(\n        map((response) => {\n          const res: DashBoardResponse = {\n            statusCode: response.status.valueOf(),\n            message: response.data !== [] ? 'success' : 'Possible bad id',\n            response: response.data.artists.items,\n          };\n          return res;\n        })\n      );\n  }\n\n  searchTrack(\n    search: string,\n    token: string,\n  ): Observable> {\n    return this.httpService\n      .get(\n        `https://api.spotify.com/v1/search?q=${search}&type=track&limit=20`,\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      )\n      .pipe(\n        map((response) => {\n          const res: DashBoardResponse = {\n            statusCode: response.status.valueOf(),\n            message: response.data !== [] ? 'success' : 'Possible bad id',\n            response: response.data.tracks.items,\n          };\n          return res;\n        })\n      );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/user.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsDefined({always: true})@IsString({always: true})@MinLength(1, {always: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsDefined({always: true})@IsString({always: true})@MinLength(5, {always: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsDefined({always: true})@IsString({always: true})@MinLength(1, {always: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDefined, IsString, MinLength } from 'class-validator';\nimport { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  @IsDefined({ always: true })\n  @IsString({ always: true })\n  @MinLength(1, { always: true })\n  username: string;\n\n  @Column()\n  @IsDefined({ always: true })\n  @IsString({ always: true })\n  @MinLength(5, { always: true })\n  password: string;\n\n  @Column()\n  @IsDefined({ always: true })\n  @IsString({ always: true })\n  @MinLength(1, { always: true })\n  email: string;\n}\n\nexport class UserDTO {\n  id?: number;\n  username?: string;\n  password: string;\n  email?: string;\n  token?: string;\n  type?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDTO.html":{"url":"classes/UserDTO.html","title":"class - UserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/user.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                email\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                token\n                            \n                            \n                                    Optional\n                                type\n                            \n                            \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDefined, IsString, MinLength } from 'class-validator';\nimport { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  @IsDefined({ always: true })\n  @IsString({ always: true })\n  @MinLength(1, { always: true })\n  username: string;\n\n  @Column()\n  @IsDefined({ always: true })\n  @IsString({ always: true })\n  @MinLength(5, { always: true })\n  password: string;\n\n  @Column()\n  @IsDefined({ always: true })\n  @IsString({ always: true })\n  @MinLength(1, { always: true })\n  email: string;\n}\n\nexport class UserDTO {\n  id?: number;\n  username?: string;\n  password: string;\n  email?: string;\n  token?: string;\n  type?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createOne\n                            \n                            \n                                    Async\n                                loginUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(req: CrudRequest, dto: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Override('createOneBase')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            CrudRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        loginUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    loginUser(username, password)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/login/:username/:password')\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Request, UseGuards } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport {\n  Crud,\n  Override,\n  ParsedRequest,\n  ParsedBody,\n  CrudRequest,\n  CrudController,\n} from '@nestjsx/crud';\nimport { User, UserDTO } from './user';\n\n@Crud({\n  model: {\n    type: User,\n  },\n})\n@Controller('user')\nexport class UsersController {\n  constructor(public service: UsersService) {}\n\n  get base(): CrudController {\n    return this;\n  }\n\n  @Get('/login/:username/:password')\n  async loginUser(\n    @Param('username') username,\n    @Param('password') password,\n  ) {\n    const res = await this.service.getOneUser(username, password)\n    if (res === undefined) {\n      return {\n        statusCode: 500,\n        message: 'Username or password is incorrect',\n      };\n    }\n    return {\n      statusCode: 200,\n      ...res\n    };\n  }\n\n  @Override('createOneBase')\n  async createOne(\n    @ParsedRequest() req: CrudRequest,\n    @ParsedBody() dto: User\n  ): Promise {\n    const res = (await this.base.createOneBase(req, dto)) as UserDTO;\n    res.type = 'user';\n    res.token = await this.service.generateToken(res);\n    return new Promise((resolve, rejects) => {\n      try {\n        resolve(res);\n      } catch (err) {\n        rejects(err);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nJwtStrategy->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JwtStrategy\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user';\nimport { UsersService } from './users.service';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\nimport { JwtStrategy } from '../auth/jwt.strategy';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User]), JwtModule.register({\n    secret: jwtConstants.secret,\n    signOptions: {\n      expiresIn: '1d'\n    }\n  })],\n  controllers: [UsersController],\n  providers: [UsersService, JwtStrategy],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/users.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    TypeOrmCrudService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateToken\n                            \n                            \n                                    Async\n                                getOneUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repo, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/users/users.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repo\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateToken(user: UserDTO)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOneUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOneUser(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { TypeOrmCrudService } from '@nestjsx/crud-typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User, UserDTO } from './user';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class UsersService extends TypeOrmCrudService {\n  constructor(@InjectRepository(User) repo, private jwtService: JwtService) {\n    super(repo);\n  }\n\n  async generateToken(user: UserDTO): Promise {\n    const payload = {\n      username: user.username,\n      password: user.password,\n      email: user.password,\n      type: user.type,\n    };\n    return this.jwtService.sign(payload);\n  }\n\n  // Get one user with username and password\n  async getOneUser(username: string, password: string): Promise {\n    \n    return await this.repo.findOne({\n      where: { username, password },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/YoutubeStrategy.html":{"url":"injectables/YoutubeStrategy.html","title":"injectable - YoutubeStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  YoutubeStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/youtube.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/youtube.strategy.ts:9\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, refreshToken: string, profile: any, done: any)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/youtube.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { config } from 'dotenv';\nimport { Strategy } from 'passport-google-oauth20';\n\nconfig();\n\n@Injectable()\nexport class YoutubeStrategy extends PassportStrategy(Strategy, 'google') {\n  constructor() {\n    super({\n      clientID: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n      callbackURL: process.env.GOOGLE_CALLBACK_URL,\n      scope: ['profile', 'email'],\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: any,\n    done: any\n  ) {\n    const { emails, name, photos } = profile;\n    const user = {\n      email: emails[0].value,\n      firstName: name.givenName,\n      lastName: name.familyName,\n      picture: photos[0].value,\n      accessToken,\n    };\n    return done(null, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                apps/api/src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/api/src/app/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                apps/api/src/auth/discord.strategy.ts\n            \n            injectable\n            DiscordStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/github.strategy.ts\n            \n            injectable\n            GithubStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/gitlab.strategy.ts\n            \n            injectable\n            Gitlabtrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/google.strategy.ts\n            \n            injectable\n            GoogleStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/linkedin.strategy.ts\n            \n            injectable\n            LinkedinStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/spotify.strategy.ts\n            \n            injectable\n            SpotidyStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/youtube.strategy.ts\n            \n            injectable\n            YoutubeStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/api/src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/github/github.controller.ts\n            \n            controller\n            GithubController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/api/src/github/github.service.ts\n            \n            injectable\n            GithubService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/spotify/spotify.controller.ts\n            \n            controller\n            SpotifyController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/api/src/spotify/spotify.service.ts\n            \n            injectable\n            SpotifyService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/users/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/users/user.ts\n            \n            class\n            User\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                apps/api/src/users/user.ts\n            \n            class\n            UserDTO\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                apps/api/src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/api/src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.16\n        \n            @emotion/react : ^11.6.0\n        \n            @emotion/styled : ^11.6.0\n        \n            @mui/material : ^5.1.1\n        \n            @nestjs/axios : ^0.0.3\n        \n            @nestjs/common : ^8.2.0\n        \n            @nestjs/core : ^8.2.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/passport : ^8.0.1\n        \n            @nestjs/platform-express : ^8.2.0\n        \n            @nestjs/swagger : ^5.1.4\n        \n            @nestjs/typeorm : ^8.0.2\n        \n            @nestjsx/crud : ^5.0.0-alpha.3\n        \n            @nestjsx/crud-typeorm : ^5.0.0-alpha.3\n        \n            @nrwl/nest : ^13.1.3\n        \n            @react-google-maps/api : ^2.7.0\n        \n            @types/passport-jwt : ^3.0.6\n        \n            @types/passport-local : ^1.0.34\n        \n            @types/randomcolor : ^0.5.6\n        \n            axios : ^0.24.0\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.4.0\n        \n            class-validator : ^0.13.1\n        \n            core-js : ^3.6.5\n        \n            dotenv : ^10.0.0\n        \n            googleapis : 39\n        \n            install : ^0.13.0\n        \n            passport : ^0.5.0\n        \n            passport-discord : ^0.1.4\n        \n            passport-github : ^1.1.0\n        \n            passport-gitlab2 : ^5.0.0\n        \n            passport-google-oauth : ^2.0.0\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-linkedin-oauth2 : ^2.0.0\n        \n            passport-local : ^1.0.0\n        \n            passport-reddit : ^0.2.4\n        \n            passport-spotify : ^2.0.0\n        \n            passport-twitch : ^1.0.3\n        \n            passport-twitchtv : ^0.1.4\n        \n            pg : ^8.7.1\n        \n            randomcolor : ^0.6.2\n        \n            react : 17.0.2\n        \n            react-dom : 17.0.2\n        \n            react-draggable : ^4.4.4\n        \n            react-icons : ^4.3.1\n        \n            react-is : 17.0.2\n        \n            react-rnd : ^10.3.5\n        \n            react-router-dom : 5.3.0\n        \n            react-spinners : ^0.11.0\n        \n            react-tradingview-widget : ^1.3.2\n        \n            react-typescript-tradingview-embed : ^1.0.8\n        \n            reflect-metadata : ^0.1.13\n        \n            regenerator-runtime : 0.13.7\n        \n            rxjs : ^7\n        \n            styled-components : 5.3.3\n        \n            swagger-ui-express : ^4.1.6\n        \n            tslib : ^2.0.0\n        \n            typeorm : ^0.2.40\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\nDashboard\nHow to build app:\nWith Docker:\ndocker build -t dashboard:nx-base .docker-compose upWithout Docker:\nyarn install && yarn run app:start\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GithubModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SpotifyModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_GithubModule\n\n\n\ncluster_GithubModule_providers\n\n\n\ncluster_SpotifyModule\n\n\n\ncluster_SpotifyModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nGithubModule\n\nGithubModule\n\nAppModule -->\n\nGithubModule->AppModule\n\n\n\n\n\nSpotifyModule\n\nSpotifyModule\n\nAppModule -->\n\nSpotifyModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nDiscordStrategy\n\nDiscordStrategy\n\nAuthModule -->\n\nDiscordStrategy->AuthModule\n\n\n\n\n\nGithubStrategy\n\nGithubStrategy\n\nAuthModule -->\n\nGithubStrategy->AuthModule\n\n\n\n\n\nGitlabtrategy\n\nGitlabtrategy\n\nAuthModule -->\n\nGitlabtrategy->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nLinkedinStrategy\n\nLinkedinStrategy\n\nAuthModule -->\n\nLinkedinStrategy->AuthModule\n\n\n\n\n\nSpotidyStrategy\n\nSpotidyStrategy\n\nAuthModule -->\n\nSpotidyStrategy->AuthModule\n\n\n\n\n\nYoutubeStrategy\n\nYoutubeStrategy\n\nAuthModule -->\n\nYoutubeStrategy->AuthModule\n\n\n\n\n\nGithubService\n\nGithubService\n\nGithubModule -->\n\nGithubService->GithubModule\n\n\n\n\n\nSpotifyService\n\nSpotifyService\n\nSpotifyModule -->\n\nSpotifyService->SpotifyModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nUsersModule -->\n\nJwtStrategy->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    14 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            environment   (apps/.../environment.prod.ts)\n                        \n                        \n                            environment   (apps/.../environment.ts)\n                        \n                        \n                            jwtConstants   (apps/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/environments/environment.prod.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: true,\n}\n                    \n                \n\n\n        \n    \n\n    apps/api/src/environments/environment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: false,\n}\n                    \n                \n\n\n        \n    \n\n    apps/api/src/users/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: 'secretKey',\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
