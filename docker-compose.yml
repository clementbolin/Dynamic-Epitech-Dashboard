version: "3.7"

networks:
  corp:
    driver: bridge

services:
  builder:
    container_name: builder
    build:
      context: ./
      dockerfile: ./Dockerfile
      target: build
    image: dashboard:nx-base
    restart: on-failure

  # Init dashboard API
  api-server:
    depends_on:
      - builder
      - postgres
    links:
      - builder
      - postgres
    container_name: api-server
    build:
      context: ./
      cache_from:
        - dashboard:nx-base
      dockerfile: ./apps/api/Dockerfile
      args:
        NODE_ENV: "development"
        BUILD_FLAG: ""
    ports:
      - "8080:8080"
    environment:
      PROD: "true"
    restart: on-failure

  # Init React JS Dashboard application
  react-client:
    depends_on:
      - builder
      - api-server
    links:
      - builder
      - api-server
    container_name: react-client
    build:
      context: ./
      cache_from:
        - dashboard:nx-base
        - nginx:1.19.2
      dockerfile: ./apps/client/Dockerfile
      args:
        NODE_ENV: "development"
    ports:
      - 3000:80
    environment:
      NODE_ENV: "development"
    restart: on-failure

  # Init DB Container
  postgres:
    image: postgres:10.5
    container_name: postgres
    restart: always
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:5432"]
        interval: 30s
        timeout: 10s
        retries: 5
    ports:
      - "5432:5432"
    env_file:
      - database.env # configure postgres
    volumes:
      - database-data:/var/lib/postgresql/data # persist data
      - ./sql/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql # create tables

  pgadmin:
    image: dpage/pgadmin4:4.28
    depends_on:
      - postgres
    links:
      - postgres
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "5050:80"

volumes:
  database-data:
